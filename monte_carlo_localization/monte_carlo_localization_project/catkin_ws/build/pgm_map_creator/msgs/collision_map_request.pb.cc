// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: collision_map_request.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "collision_map_request.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace collision_map_creator_msgs {
namespace msgs {

namespace {

const ::google::protobuf::Descriptor* CollisionMapRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CollisionMapRequest_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_collision_5fmap_5frequest_2eproto() GOOGLE_ATTRIBUTE_COLD;
void protobuf_AssignDesc_collision_5fmap_5frequest_2eproto() {
  protobuf_AddDesc_collision_5fmap_5frequest_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "collision_map_request.proto");
  GOOGLE_CHECK(file != NULL);
  CollisionMapRequest_descriptor_ = file->message_type(0);
  static const int CollisionMapRequest_offsets_[8] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CollisionMapRequest, upperleft_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CollisionMapRequest, upperright_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CollisionMapRequest, lowerright_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CollisionMapRequest, lowerleft_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CollisionMapRequest, height_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CollisionMapRequest, resolution_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CollisionMapRequest, filename_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CollisionMapRequest, threshold_),
  };
  CollisionMapRequest_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      CollisionMapRequest_descriptor_,
      CollisionMapRequest::default_instance_,
      CollisionMapRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CollisionMapRequest, _has_bits_[0]),
      -1,
      -1,
      sizeof(CollisionMapRequest),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CollisionMapRequest, _internal_metadata_),
      -1);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_collision_5fmap_5frequest_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      CollisionMapRequest_descriptor_, &CollisionMapRequest::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_collision_5fmap_5frequest_2eproto() {
  delete CollisionMapRequest::default_instance_;
  delete CollisionMapRequest_reflection_;
}

void protobuf_AddDesc_collision_5fmap_5frequest_2eproto() GOOGLE_ATTRIBUTE_COLD;
void protobuf_AddDesc_collision_5fmap_5frequest_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::gazebo::msgs::protobuf_AddDesc_vector2d_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\033collision_map_request.proto\022\037collision"
    "_map_creator_msgs.msgs\032\016vector2d.proto\"\217"
    "\002\n\023CollisionMapRequest\022(\n\tupperLeft\030\001 \002("
    "\0132\025.gazebo.msgs.Vector2d\022)\n\nupperRight\030\002"
    " \002(\0132\025.gazebo.msgs.Vector2d\022)\n\nlowerRigh"
    "t\030\003 \002(\0132\025.gazebo.msgs.Vector2d\022(\n\tlowerL"
    "eft\030\004 \002(\0132\025.gazebo.msgs.Vector2d\022\016\n\006heig"
    "ht\030\005 \002(\001\022\022\n\nresolution\030\006 \002(\001\022\022\n\010filename"
    "\030\007 \001(\t:\000\022\026\n\tthreshold\030\010 \001(\005:\003255", 352);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "collision_map_request.proto", &protobuf_RegisterTypes);
  CollisionMapRequest::default_instance_ = new CollisionMapRequest();
  CollisionMapRequest::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_collision_5fmap_5frequest_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_collision_5fmap_5frequest_2eproto {
  StaticDescriptorInitializer_collision_5fmap_5frequest_2eproto() {
    protobuf_AddDesc_collision_5fmap_5frequest_2eproto();
  }
} static_descriptor_initializer_collision_5fmap_5frequest_2eproto_;

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CollisionMapRequest::kUpperLeftFieldNumber;
const int CollisionMapRequest::kUpperRightFieldNumber;
const int CollisionMapRequest::kLowerRightFieldNumber;
const int CollisionMapRequest::kLowerLeftFieldNumber;
const int CollisionMapRequest::kHeightFieldNumber;
const int CollisionMapRequest::kResolutionFieldNumber;
const int CollisionMapRequest::kFilenameFieldNumber;
const int CollisionMapRequest::kThresholdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CollisionMapRequest::CollisionMapRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:collision_map_creator_msgs.msgs.CollisionMapRequest)
}

void CollisionMapRequest::InitAsDefaultInstance() {
  upperleft_ = const_cast< ::gazebo::msgs::Vector2d*>(&::gazebo::msgs::Vector2d::default_instance());
  upperright_ = const_cast< ::gazebo::msgs::Vector2d*>(&::gazebo::msgs::Vector2d::default_instance());
  lowerright_ = const_cast< ::gazebo::msgs::Vector2d*>(&::gazebo::msgs::Vector2d::default_instance());
  lowerleft_ = const_cast< ::gazebo::msgs::Vector2d*>(&::gazebo::msgs::Vector2d::default_instance());
}

CollisionMapRequest::CollisionMapRequest(const CollisionMapRequest& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:collision_map_creator_msgs.msgs.CollisionMapRequest)
}

void CollisionMapRequest::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  upperleft_ = NULL;
  upperright_ = NULL;
  lowerright_ = NULL;
  lowerleft_ = NULL;
  height_ = 0;
  resolution_ = 0;
  filename_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  threshold_ = 255;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CollisionMapRequest::~CollisionMapRequest() {
  // @@protoc_insertion_point(destructor:collision_map_creator_msgs.msgs.CollisionMapRequest)
  SharedDtor();
}

void CollisionMapRequest::SharedDtor() {
  filename_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
    delete upperleft_;
    delete upperright_;
    delete lowerright_;
    delete lowerleft_;
  }
}

void CollisionMapRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CollisionMapRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CollisionMapRequest_descriptor_;
}

const CollisionMapRequest& CollisionMapRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_collision_5fmap_5frequest_2eproto();
  return *default_instance_;
}

CollisionMapRequest* CollisionMapRequest::default_instance_ = NULL;

CollisionMapRequest* CollisionMapRequest::New(::google::protobuf::Arena* arena) const {
  CollisionMapRequest* n = new CollisionMapRequest;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CollisionMapRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:collision_map_creator_msgs.msgs.CollisionMapRequest)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(CollisionMapRequest, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<CollisionMapRequest*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  if (_has_bits_[0 / 32] & 255u) {
    ZR_(height_, resolution_);
    if (has_upperleft()) {
      if (upperleft_ != NULL) upperleft_->::gazebo::msgs::Vector2d::Clear();
    }
    if (has_upperright()) {
      if (upperright_ != NULL) upperright_->::gazebo::msgs::Vector2d::Clear();
    }
    if (has_lowerright()) {
      if (lowerright_ != NULL) lowerright_->::gazebo::msgs::Vector2d::Clear();
    }
    if (has_lowerleft()) {
      if (lowerleft_ != NULL) lowerleft_->::gazebo::msgs::Vector2d::Clear();
    }
    if (has_filename()) {
      filename_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    threshold_ = 255;
  }

#undef ZR_HELPER_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool CollisionMapRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:collision_map_creator_msgs.msgs.CollisionMapRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .gazebo.msgs.Vector2d upperLeft = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_upperleft()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_upperRight;
        break;
      }

      // required .gazebo.msgs.Vector2d upperRight = 2;
      case 2: {
        if (tag == 18) {
         parse_upperRight:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_upperright()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_lowerRight;
        break;
      }

      // required .gazebo.msgs.Vector2d lowerRight = 3;
      case 3: {
        if (tag == 26) {
         parse_lowerRight:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_lowerright()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_lowerLeft;
        break;
      }

      // required .gazebo.msgs.Vector2d lowerLeft = 4;
      case 4: {
        if (tag == 34) {
         parse_lowerLeft:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_lowerleft()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(41)) goto parse_height;
        break;
      }

      // required double height = 5;
      case 5: {
        if (tag == 41) {
         parse_height:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &height_)));
          set_has_height();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(49)) goto parse_resolution;
        break;
      }

      // required double resolution = 6;
      case 6: {
        if (tag == 49) {
         parse_resolution:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &resolution_)));
          set_has_resolution();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(58)) goto parse_filename;
        break;
      }

      // optional string filename = 7 [default = ""];
      case 7: {
        if (tag == 58) {
         parse_filename:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_filename()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->filename().data(), this->filename().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "collision_map_creator_msgs.msgs.CollisionMapRequest.filename");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(64)) goto parse_threshold;
        break;
      }

      // optional int32 threshold = 8 [default = 255];
      case 8: {
        if (tag == 64) {
         parse_threshold:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &threshold_)));
          set_has_threshold();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:collision_map_creator_msgs.msgs.CollisionMapRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:collision_map_creator_msgs.msgs.CollisionMapRequest)
  return false;
#undef DO_
}

void CollisionMapRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:collision_map_creator_msgs.msgs.CollisionMapRequest)
  // required .gazebo.msgs.Vector2d upperLeft = 1;
  if (has_upperleft()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->upperleft_, output);
  }

  // required .gazebo.msgs.Vector2d upperRight = 2;
  if (has_upperright()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->upperright_, output);
  }

  // required .gazebo.msgs.Vector2d lowerRight = 3;
  if (has_lowerright()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, *this->lowerright_, output);
  }

  // required .gazebo.msgs.Vector2d lowerLeft = 4;
  if (has_lowerleft()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, *this->lowerleft_, output);
  }

  // required double height = 5;
  if (has_height()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(5, this->height(), output);
  }

  // required double resolution = 6;
  if (has_resolution()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(6, this->resolution(), output);
  }

  // optional string filename = 7 [default = ""];
  if (has_filename()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->filename().data(), this->filename().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "collision_map_creator_msgs.msgs.CollisionMapRequest.filename");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      7, this->filename(), output);
  }

  // optional int32 threshold = 8 [default = 255];
  if (has_threshold()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->threshold(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:collision_map_creator_msgs.msgs.CollisionMapRequest)
}

::google::protobuf::uint8* CollisionMapRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:collision_map_creator_msgs.msgs.CollisionMapRequest)
  // required .gazebo.msgs.Vector2d upperLeft = 1;
  if (has_upperleft()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->upperleft_, false, target);
  }

  // required .gazebo.msgs.Vector2d upperRight = 2;
  if (has_upperright()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, *this->upperright_, false, target);
  }

  // required .gazebo.msgs.Vector2d lowerRight = 3;
  if (has_lowerright()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        3, *this->lowerright_, false, target);
  }

  // required .gazebo.msgs.Vector2d lowerLeft = 4;
  if (has_lowerleft()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        4, *this->lowerleft_, false, target);
  }

  // required double height = 5;
  if (has_height()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(5, this->height(), target);
  }

  // required double resolution = 6;
  if (has_resolution()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(6, this->resolution(), target);
  }

  // optional string filename = 7 [default = ""];
  if (has_filename()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->filename().data(), this->filename().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "collision_map_creator_msgs.msgs.CollisionMapRequest.filename");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        7, this->filename(), target);
  }

  // optional int32 threshold = 8 [default = 255];
  if (has_threshold()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->threshold(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:collision_map_creator_msgs.msgs.CollisionMapRequest)
  return target;
}

int CollisionMapRequest::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:collision_map_creator_msgs.msgs.CollisionMapRequest)
  int total_size = 0;

  if (has_upperleft()) {
    // required .gazebo.msgs.Vector2d upperLeft = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->upperleft_);
  }

  if (has_upperright()) {
    // required .gazebo.msgs.Vector2d upperRight = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->upperright_);
  }

  if (has_lowerright()) {
    // required .gazebo.msgs.Vector2d lowerRight = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->lowerright_);
  }

  if (has_lowerleft()) {
    // required .gazebo.msgs.Vector2d lowerLeft = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->lowerleft_);
  }

  if (has_height()) {
    // required double height = 5;
    total_size += 1 + 8;
  }

  if (has_resolution()) {
    // required double resolution = 6;
    total_size += 1 + 8;
  }

  return total_size;
}
int CollisionMapRequest::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:collision_map_creator_msgs.msgs.CollisionMapRequest)
  int total_size = 0;

  if (((_has_bits_[0] & 0x0000003f) ^ 0x0000003f) == 0) {  // All required fields are present.
    // required .gazebo.msgs.Vector2d upperLeft = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->upperleft_);

    // required .gazebo.msgs.Vector2d upperRight = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->upperright_);

    // required .gazebo.msgs.Vector2d lowerRight = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->lowerright_);

    // required .gazebo.msgs.Vector2d lowerLeft = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->lowerleft_);

    // required double height = 5;
    total_size += 1 + 8;

    // required double resolution = 6;
    total_size += 1 + 8;

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  if (_has_bits_[6 / 32] & 192u) {
    // optional string filename = 7 [default = ""];
    if (has_filename()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->filename());
    }

    // optional int32 threshold = 8 [default = 255];
    if (has_threshold()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->threshold());
    }

  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CollisionMapRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:collision_map_creator_msgs.msgs.CollisionMapRequest)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const CollisionMapRequest* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const CollisionMapRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:collision_map_creator_msgs.msgs.CollisionMapRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:collision_map_creator_msgs.msgs.CollisionMapRequest)
    MergeFrom(*source);
  }
}

void CollisionMapRequest::MergeFrom(const CollisionMapRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:collision_map_creator_msgs.msgs.CollisionMapRequest)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_upperleft()) {
      mutable_upperleft()->::gazebo::msgs::Vector2d::MergeFrom(from.upperleft());
    }
    if (from.has_upperright()) {
      mutable_upperright()->::gazebo::msgs::Vector2d::MergeFrom(from.upperright());
    }
    if (from.has_lowerright()) {
      mutable_lowerright()->::gazebo::msgs::Vector2d::MergeFrom(from.lowerright());
    }
    if (from.has_lowerleft()) {
      mutable_lowerleft()->::gazebo::msgs::Vector2d::MergeFrom(from.lowerleft());
    }
    if (from.has_height()) {
      set_height(from.height());
    }
    if (from.has_resolution()) {
      set_resolution(from.resolution());
    }
    if (from.has_filename()) {
      set_has_filename();
      filename_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.filename_);
    }
    if (from.has_threshold()) {
      set_threshold(from.threshold());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void CollisionMapRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:collision_map_creator_msgs.msgs.CollisionMapRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CollisionMapRequest::CopyFrom(const CollisionMapRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:collision_map_creator_msgs.msgs.CollisionMapRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CollisionMapRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000003f) != 0x0000003f) return false;

  if (has_upperleft()) {
    if (!this->upperleft_->IsInitialized()) return false;
  }
  if (has_upperright()) {
    if (!this->upperright_->IsInitialized()) return false;
  }
  if (has_lowerright()) {
    if (!this->lowerright_->IsInitialized()) return false;
  }
  if (has_lowerleft()) {
    if (!this->lowerleft_->IsInitialized()) return false;
  }
  return true;
}

void CollisionMapRequest::Swap(CollisionMapRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CollisionMapRequest::InternalSwap(CollisionMapRequest* other) {
  std::swap(upperleft_, other->upperleft_);
  std::swap(upperright_, other->upperright_);
  std::swap(lowerright_, other->lowerright_);
  std::swap(lowerleft_, other->lowerleft_);
  std::swap(height_, other->height_);
  std::swap(resolution_, other->resolution_);
  filename_.Swap(&other->filename_);
  std::swap(threshold_, other->threshold_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CollisionMapRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CollisionMapRequest_descriptor_;
  metadata.reflection = CollisionMapRequest_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CollisionMapRequest

// required .gazebo.msgs.Vector2d upperLeft = 1;
bool CollisionMapRequest::has_upperleft() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CollisionMapRequest::set_has_upperleft() {
  _has_bits_[0] |= 0x00000001u;
}
void CollisionMapRequest::clear_has_upperleft() {
  _has_bits_[0] &= ~0x00000001u;
}
void CollisionMapRequest::clear_upperleft() {
  if (upperleft_ != NULL) upperleft_->::gazebo::msgs::Vector2d::Clear();
  clear_has_upperleft();
}
const ::gazebo::msgs::Vector2d& CollisionMapRequest::upperleft() const {
  // @@protoc_insertion_point(field_get:collision_map_creator_msgs.msgs.CollisionMapRequest.upperLeft)
  return upperleft_ != NULL ? *upperleft_ : *default_instance_->upperleft_;
}
::gazebo::msgs::Vector2d* CollisionMapRequest::mutable_upperleft() {
  set_has_upperleft();
  if (upperleft_ == NULL) {
    upperleft_ = new ::gazebo::msgs::Vector2d;
  }
  // @@protoc_insertion_point(field_mutable:collision_map_creator_msgs.msgs.CollisionMapRequest.upperLeft)
  return upperleft_;
}
::gazebo::msgs::Vector2d* CollisionMapRequest::release_upperleft() {
  // @@protoc_insertion_point(field_release:collision_map_creator_msgs.msgs.CollisionMapRequest.upperLeft)
  clear_has_upperleft();
  ::gazebo::msgs::Vector2d* temp = upperleft_;
  upperleft_ = NULL;
  return temp;
}
void CollisionMapRequest::set_allocated_upperleft(::gazebo::msgs::Vector2d* upperleft) {
  delete upperleft_;
  upperleft_ = upperleft;
  if (upperleft) {
    set_has_upperleft();
  } else {
    clear_has_upperleft();
  }
  // @@protoc_insertion_point(field_set_allocated:collision_map_creator_msgs.msgs.CollisionMapRequest.upperLeft)
}

// required .gazebo.msgs.Vector2d upperRight = 2;
bool CollisionMapRequest::has_upperright() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void CollisionMapRequest::set_has_upperright() {
  _has_bits_[0] |= 0x00000002u;
}
void CollisionMapRequest::clear_has_upperright() {
  _has_bits_[0] &= ~0x00000002u;
}
void CollisionMapRequest::clear_upperright() {
  if (upperright_ != NULL) upperright_->::gazebo::msgs::Vector2d::Clear();
  clear_has_upperright();
}
const ::gazebo::msgs::Vector2d& CollisionMapRequest::upperright() const {
  // @@protoc_insertion_point(field_get:collision_map_creator_msgs.msgs.CollisionMapRequest.upperRight)
  return upperright_ != NULL ? *upperright_ : *default_instance_->upperright_;
}
::gazebo::msgs::Vector2d* CollisionMapRequest::mutable_upperright() {
  set_has_upperright();
  if (upperright_ == NULL) {
    upperright_ = new ::gazebo::msgs::Vector2d;
  }
  // @@protoc_insertion_point(field_mutable:collision_map_creator_msgs.msgs.CollisionMapRequest.upperRight)
  return upperright_;
}
::gazebo::msgs::Vector2d* CollisionMapRequest::release_upperright() {
  // @@protoc_insertion_point(field_release:collision_map_creator_msgs.msgs.CollisionMapRequest.upperRight)
  clear_has_upperright();
  ::gazebo::msgs::Vector2d* temp = upperright_;
  upperright_ = NULL;
  return temp;
}
void CollisionMapRequest::set_allocated_upperright(::gazebo::msgs::Vector2d* upperright) {
  delete upperright_;
  upperright_ = upperright;
  if (upperright) {
    set_has_upperright();
  } else {
    clear_has_upperright();
  }
  // @@protoc_insertion_point(field_set_allocated:collision_map_creator_msgs.msgs.CollisionMapRequest.upperRight)
}

// required .gazebo.msgs.Vector2d lowerRight = 3;
bool CollisionMapRequest::has_lowerright() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void CollisionMapRequest::set_has_lowerright() {
  _has_bits_[0] |= 0x00000004u;
}
void CollisionMapRequest::clear_has_lowerright() {
  _has_bits_[0] &= ~0x00000004u;
}
void CollisionMapRequest::clear_lowerright() {
  if (lowerright_ != NULL) lowerright_->::gazebo::msgs::Vector2d::Clear();
  clear_has_lowerright();
}
const ::gazebo::msgs::Vector2d& CollisionMapRequest::lowerright() const {
  // @@protoc_insertion_point(field_get:collision_map_creator_msgs.msgs.CollisionMapRequest.lowerRight)
  return lowerright_ != NULL ? *lowerright_ : *default_instance_->lowerright_;
}
::gazebo::msgs::Vector2d* CollisionMapRequest::mutable_lowerright() {
  set_has_lowerright();
  if (lowerright_ == NULL) {
    lowerright_ = new ::gazebo::msgs::Vector2d;
  }
  // @@protoc_insertion_point(field_mutable:collision_map_creator_msgs.msgs.CollisionMapRequest.lowerRight)
  return lowerright_;
}
::gazebo::msgs::Vector2d* CollisionMapRequest::release_lowerright() {
  // @@protoc_insertion_point(field_release:collision_map_creator_msgs.msgs.CollisionMapRequest.lowerRight)
  clear_has_lowerright();
  ::gazebo::msgs::Vector2d* temp = lowerright_;
  lowerright_ = NULL;
  return temp;
}
void CollisionMapRequest::set_allocated_lowerright(::gazebo::msgs::Vector2d* lowerright) {
  delete lowerright_;
  lowerright_ = lowerright;
  if (lowerright) {
    set_has_lowerright();
  } else {
    clear_has_lowerright();
  }
  // @@protoc_insertion_point(field_set_allocated:collision_map_creator_msgs.msgs.CollisionMapRequest.lowerRight)
}

// required .gazebo.msgs.Vector2d lowerLeft = 4;
bool CollisionMapRequest::has_lowerleft() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void CollisionMapRequest::set_has_lowerleft() {
  _has_bits_[0] |= 0x00000008u;
}
void CollisionMapRequest::clear_has_lowerleft() {
  _has_bits_[0] &= ~0x00000008u;
}
void CollisionMapRequest::clear_lowerleft() {
  if (lowerleft_ != NULL) lowerleft_->::gazebo::msgs::Vector2d::Clear();
  clear_has_lowerleft();
}
const ::gazebo::msgs::Vector2d& CollisionMapRequest::lowerleft() const {
  // @@protoc_insertion_point(field_get:collision_map_creator_msgs.msgs.CollisionMapRequest.lowerLeft)
  return lowerleft_ != NULL ? *lowerleft_ : *default_instance_->lowerleft_;
}
::gazebo::msgs::Vector2d* CollisionMapRequest::mutable_lowerleft() {
  set_has_lowerleft();
  if (lowerleft_ == NULL) {
    lowerleft_ = new ::gazebo::msgs::Vector2d;
  }
  // @@protoc_insertion_point(field_mutable:collision_map_creator_msgs.msgs.CollisionMapRequest.lowerLeft)
  return lowerleft_;
}
::gazebo::msgs::Vector2d* CollisionMapRequest::release_lowerleft() {
  // @@protoc_insertion_point(field_release:collision_map_creator_msgs.msgs.CollisionMapRequest.lowerLeft)
  clear_has_lowerleft();
  ::gazebo::msgs::Vector2d* temp = lowerleft_;
  lowerleft_ = NULL;
  return temp;
}
void CollisionMapRequest::set_allocated_lowerleft(::gazebo::msgs::Vector2d* lowerleft) {
  delete lowerleft_;
  lowerleft_ = lowerleft;
  if (lowerleft) {
    set_has_lowerleft();
  } else {
    clear_has_lowerleft();
  }
  // @@protoc_insertion_point(field_set_allocated:collision_map_creator_msgs.msgs.CollisionMapRequest.lowerLeft)
}

// required double height = 5;
bool CollisionMapRequest::has_height() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void CollisionMapRequest::set_has_height() {
  _has_bits_[0] |= 0x00000010u;
}
void CollisionMapRequest::clear_has_height() {
  _has_bits_[0] &= ~0x00000010u;
}
void CollisionMapRequest::clear_height() {
  height_ = 0;
  clear_has_height();
}
 double CollisionMapRequest::height() const {
  // @@protoc_insertion_point(field_get:collision_map_creator_msgs.msgs.CollisionMapRequest.height)
  return height_;
}
 void CollisionMapRequest::set_height(double value) {
  set_has_height();
  height_ = value;
  // @@protoc_insertion_point(field_set:collision_map_creator_msgs.msgs.CollisionMapRequest.height)
}

// required double resolution = 6;
bool CollisionMapRequest::has_resolution() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void CollisionMapRequest::set_has_resolution() {
  _has_bits_[0] |= 0x00000020u;
}
void CollisionMapRequest::clear_has_resolution() {
  _has_bits_[0] &= ~0x00000020u;
}
void CollisionMapRequest::clear_resolution() {
  resolution_ = 0;
  clear_has_resolution();
}
 double CollisionMapRequest::resolution() const {
  // @@protoc_insertion_point(field_get:collision_map_creator_msgs.msgs.CollisionMapRequest.resolution)
  return resolution_;
}
 void CollisionMapRequest::set_resolution(double value) {
  set_has_resolution();
  resolution_ = value;
  // @@protoc_insertion_point(field_set:collision_map_creator_msgs.msgs.CollisionMapRequest.resolution)
}

// optional string filename = 7 [default = ""];
bool CollisionMapRequest::has_filename() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
void CollisionMapRequest::set_has_filename() {
  _has_bits_[0] |= 0x00000040u;
}
void CollisionMapRequest::clear_has_filename() {
  _has_bits_[0] &= ~0x00000040u;
}
void CollisionMapRequest::clear_filename() {
  filename_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_filename();
}
 const ::std::string& CollisionMapRequest::filename() const {
  // @@protoc_insertion_point(field_get:collision_map_creator_msgs.msgs.CollisionMapRequest.filename)
  return filename_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void CollisionMapRequest::set_filename(const ::std::string& value) {
  set_has_filename();
  filename_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:collision_map_creator_msgs.msgs.CollisionMapRequest.filename)
}
 void CollisionMapRequest::set_filename(const char* value) {
  set_has_filename();
  filename_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:collision_map_creator_msgs.msgs.CollisionMapRequest.filename)
}
 void CollisionMapRequest::set_filename(const char* value, size_t size) {
  set_has_filename();
  filename_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:collision_map_creator_msgs.msgs.CollisionMapRequest.filename)
}
 ::std::string* CollisionMapRequest::mutable_filename() {
  set_has_filename();
  // @@protoc_insertion_point(field_mutable:collision_map_creator_msgs.msgs.CollisionMapRequest.filename)
  return filename_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* CollisionMapRequest::release_filename() {
  // @@protoc_insertion_point(field_release:collision_map_creator_msgs.msgs.CollisionMapRequest.filename)
  clear_has_filename();
  return filename_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void CollisionMapRequest::set_allocated_filename(::std::string* filename) {
  if (filename != NULL) {
    set_has_filename();
  } else {
    clear_has_filename();
  }
  filename_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), filename);
  // @@protoc_insertion_point(field_set_allocated:collision_map_creator_msgs.msgs.CollisionMapRequest.filename)
}

// optional int32 threshold = 8 [default = 255];
bool CollisionMapRequest::has_threshold() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
void CollisionMapRequest::set_has_threshold() {
  _has_bits_[0] |= 0x00000080u;
}
void CollisionMapRequest::clear_has_threshold() {
  _has_bits_[0] &= ~0x00000080u;
}
void CollisionMapRequest::clear_threshold() {
  threshold_ = 255;
  clear_has_threshold();
}
 ::google::protobuf::int32 CollisionMapRequest::threshold() const {
  // @@protoc_insertion_point(field_get:collision_map_creator_msgs.msgs.CollisionMapRequest.threshold)
  return threshold_;
}
 void CollisionMapRequest::set_threshold(::google::protobuf::int32 value) {
  set_has_threshold();
  threshold_ = value;
  // @@protoc_insertion_point(field_set:collision_map_creator_msgs.msgs.CollisionMapRequest.threshold)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace msgs
}  // namespace collision_map_creator_msgs

// @@protoc_insertion_point(global_scope)
