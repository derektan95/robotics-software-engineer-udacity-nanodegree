# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from rtabmap_ros/OdomInfo.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import geometry_msgs.msg
import rtabmap_ros.msg
import std_msgs.msg

class OdomInfo(genpy.Message):
  _md5sum = "66979b4899394b2f3358952241c550e5"
  _type = "rtabmap_ros/OdomInfo"
  _has_header = True  # flag to mark the presence of a Header object
  _full_text = """
Header header

bool lost
int32 matches
int32 inliers
float32 icpInliersRatio
float32 icpRotation
float32 icpTranslation
float32 icpStructuralComplexity
float32 icpStructuralDistribution
int32 icpCorrespondences
float64[36] covariance
int32 features
int32 localMapSize
int32 localScanMapSize
int32 localKeyFrames
int32 localBundleOutliers
int32 localBundleConstraints
float32 localBundleTime
bool keyFrameAdded
float32 timeEstimation
float32 timeParticleFiltering
float32 stamp
float32 interval
float32 distanceTravelled
int32 memoryUsage # MB
float32 gravityRollError
float32 gravityPitchError

geometry_msgs/Transform transform
geometry_msgs/Transform transformFiltered
geometry_msgs/Transform transformGroundTruth
geometry_msgs/Transform guessVelocity

# 0=F2M, 1=F2F
int32 type

# F2M odometry
#   std::multimap<int, cv::KeyPoint> words;
#   std::vector<int> wordMatches;
#   std::vector<int> wordInliers;
int32[] wordsKeys
KeyPoint[] wordsValues
int32[] wordMatches
int32[] wordInliers
int32[] localMapKeys
Point3f[] localMapValues

# compressed local scan map data
# use rtabmap::util3d::uncompressData() from "rtabmap/core/util3d.h"
uint8[] localScanMap

# F2F odometry
#   std::vector<cv::Point2f> refCorners;
#   std::vector<cv::Point2f> newCorners;
#   std::vector<int> cornerInliers;
Point2f[] refCorners
Point2f[] newCorners
int32[] cornerInliers


================================================================================
MSG: std_msgs/Header
# Standard metadata for higher-level stamped data types.
# This is generally used to communicate timestamped data 
# in a particular coordinate frame.
# 
# sequence ID: consecutively increasing ID 
uint32 seq
#Two-integer timestamp that is expressed as:
# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')
# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')
# time-handling sugar is provided by the client library
time stamp
#Frame this data is associated with
# 0: no frame
# 1: global frame
string frame_id

================================================================================
MSG: geometry_msgs/Transform
# This represents the transform between two coordinate frames in free space.

Vector3 translation
Quaternion rotation

================================================================================
MSG: geometry_msgs/Vector3
# This represents a vector in free space. 
# It is only meant to represent a direction. Therefore, it does not
# make sense to apply a translation to it (e.g., when applying a 
# generic rigid transformation to a Vector3, tf2 will only apply the
# rotation). If you want your data to be translatable too, use the
# geometry_msgs/Point message instead.

float64 x
float64 y
float64 z
================================================================================
MSG: geometry_msgs/Quaternion
# This represents an orientation in free space in quaternion form.

float64 x
float64 y
float64 z
float64 w

================================================================================
MSG: rtabmap_ros/KeyPoint
#class cv::KeyPoint
#{
#    Point2f pt;
#    float size;
#    float angle;
#    float response;
#    int octave;
#    int class_id;
#}

Point2f pt
float32 size
float32 angle
float32 response
int32 octave
int32 class_id
================================================================================
MSG: rtabmap_ros/Point2f
#class cv::Point2f
#{
#    float x;
#    float y;
#}

float32 x
float32 y
================================================================================
MSG: rtabmap_ros/Point3f
#class cv::Point3f
#{
#    float x;
#    float y;
#    float z;
#}

float32 x
float32 y
float32 z"""
  __slots__ = ['header','lost','matches','inliers','icpInliersRatio','icpRotation','icpTranslation','icpStructuralComplexity','icpStructuralDistribution','icpCorrespondences','covariance','features','localMapSize','localScanMapSize','localKeyFrames','localBundleOutliers','localBundleConstraints','localBundleTime','keyFrameAdded','timeEstimation','timeParticleFiltering','stamp','interval','distanceTravelled','memoryUsage','gravityRollError','gravityPitchError','transform','transformFiltered','transformGroundTruth','guessVelocity','type','wordsKeys','wordsValues','wordMatches','wordInliers','localMapKeys','localMapValues','localScanMap','refCorners','newCorners','cornerInliers']
  _slot_types = ['std_msgs/Header','bool','int32','int32','float32','float32','float32','float32','float32','int32','float64[36]','int32','int32','int32','int32','int32','int32','float32','bool','float32','float32','float32','float32','float32','int32','float32','float32','geometry_msgs/Transform','geometry_msgs/Transform','geometry_msgs/Transform','geometry_msgs/Transform','int32','int32[]','rtabmap_ros/KeyPoint[]','int32[]','int32[]','int32[]','rtabmap_ros/Point3f[]','uint8[]','rtabmap_ros/Point2f[]','rtabmap_ros/Point2f[]','int32[]']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       header,lost,matches,inliers,icpInliersRatio,icpRotation,icpTranslation,icpStructuralComplexity,icpStructuralDistribution,icpCorrespondences,covariance,features,localMapSize,localScanMapSize,localKeyFrames,localBundleOutliers,localBundleConstraints,localBundleTime,keyFrameAdded,timeEstimation,timeParticleFiltering,stamp,interval,distanceTravelled,memoryUsage,gravityRollError,gravityPitchError,transform,transformFiltered,transformGroundTruth,guessVelocity,type,wordsKeys,wordsValues,wordMatches,wordInliers,localMapKeys,localMapValues,localScanMap,refCorners,newCorners,cornerInliers

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(OdomInfo, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.header is None:
        self.header = std_msgs.msg.Header()
      if self.lost is None:
        self.lost = False
      if self.matches is None:
        self.matches = 0
      if self.inliers is None:
        self.inliers = 0
      if self.icpInliersRatio is None:
        self.icpInliersRatio = 0.
      if self.icpRotation is None:
        self.icpRotation = 0.
      if self.icpTranslation is None:
        self.icpTranslation = 0.
      if self.icpStructuralComplexity is None:
        self.icpStructuralComplexity = 0.
      if self.icpStructuralDistribution is None:
        self.icpStructuralDistribution = 0.
      if self.icpCorrespondences is None:
        self.icpCorrespondences = 0
      if self.covariance is None:
        self.covariance = [0.] * 36
      if self.features is None:
        self.features = 0
      if self.localMapSize is None:
        self.localMapSize = 0
      if self.localScanMapSize is None:
        self.localScanMapSize = 0
      if self.localKeyFrames is None:
        self.localKeyFrames = 0
      if self.localBundleOutliers is None:
        self.localBundleOutliers = 0
      if self.localBundleConstraints is None:
        self.localBundleConstraints = 0
      if self.localBundleTime is None:
        self.localBundleTime = 0.
      if self.keyFrameAdded is None:
        self.keyFrameAdded = False
      if self.timeEstimation is None:
        self.timeEstimation = 0.
      if self.timeParticleFiltering is None:
        self.timeParticleFiltering = 0.
      if self.stamp is None:
        self.stamp = 0.
      if self.interval is None:
        self.interval = 0.
      if self.distanceTravelled is None:
        self.distanceTravelled = 0.
      if self.memoryUsage is None:
        self.memoryUsage = 0
      if self.gravityRollError is None:
        self.gravityRollError = 0.
      if self.gravityPitchError is None:
        self.gravityPitchError = 0.
      if self.transform is None:
        self.transform = geometry_msgs.msg.Transform()
      if self.transformFiltered is None:
        self.transformFiltered = geometry_msgs.msg.Transform()
      if self.transformGroundTruth is None:
        self.transformGroundTruth = geometry_msgs.msg.Transform()
      if self.guessVelocity is None:
        self.guessVelocity = geometry_msgs.msg.Transform()
      if self.type is None:
        self.type = 0
      if self.wordsKeys is None:
        self.wordsKeys = []
      if self.wordsValues is None:
        self.wordsValues = []
      if self.wordMatches is None:
        self.wordMatches = []
      if self.wordInliers is None:
        self.wordInliers = []
      if self.localMapKeys is None:
        self.localMapKeys = []
      if self.localMapValues is None:
        self.localMapValues = []
      if self.localScanMap is None:
        self.localScanMap = b''
      if self.refCorners is None:
        self.refCorners = []
      if self.newCorners is None:
        self.newCorners = []
      if self.cornerInliers is None:
        self.cornerInliers = []
    else:
      self.header = std_msgs.msg.Header()
      self.lost = False
      self.matches = 0
      self.inliers = 0
      self.icpInliersRatio = 0.
      self.icpRotation = 0.
      self.icpTranslation = 0.
      self.icpStructuralComplexity = 0.
      self.icpStructuralDistribution = 0.
      self.icpCorrespondences = 0
      self.covariance = [0.] * 36
      self.features = 0
      self.localMapSize = 0
      self.localScanMapSize = 0
      self.localKeyFrames = 0
      self.localBundleOutliers = 0
      self.localBundleConstraints = 0
      self.localBundleTime = 0.
      self.keyFrameAdded = False
      self.timeEstimation = 0.
      self.timeParticleFiltering = 0.
      self.stamp = 0.
      self.interval = 0.
      self.distanceTravelled = 0.
      self.memoryUsage = 0
      self.gravityRollError = 0.
      self.gravityPitchError = 0.
      self.transform = geometry_msgs.msg.Transform()
      self.transformFiltered = geometry_msgs.msg.Transform()
      self.transformGroundTruth = geometry_msgs.msg.Transform()
      self.guessVelocity = geometry_msgs.msg.Transform()
      self.type = 0
      self.wordsKeys = []
      self.wordsValues = []
      self.wordMatches = []
      self.wordInliers = []
      self.localMapKeys = []
      self.localMapValues = []
      self.localScanMap = b''
      self.refCorners = []
      self.newCorners = []
      self.cornerInliers = []

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_3I().pack(_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs))
      _x = self.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_B2i5fi().pack(_x.lost, _x.matches, _x.inliers, _x.icpInliersRatio, _x.icpRotation, _x.icpTranslation, _x.icpStructuralComplexity, _x.icpStructuralDistribution, _x.icpCorrespondences))
      buff.write(_get_struct_36d().pack(*self.covariance))
      _x = self
      buff.write(_get_struct_6ifB5fi2f28di().pack(_x.features, _x.localMapSize, _x.localScanMapSize, _x.localKeyFrames, _x.localBundleOutliers, _x.localBundleConstraints, _x.localBundleTime, _x.keyFrameAdded, _x.timeEstimation, _x.timeParticleFiltering, _x.stamp, _x.interval, _x.distanceTravelled, _x.memoryUsage, _x.gravityRollError, _x.gravityPitchError, _x.transform.translation.x, _x.transform.translation.y, _x.transform.translation.z, _x.transform.rotation.x, _x.transform.rotation.y, _x.transform.rotation.z, _x.transform.rotation.w, _x.transformFiltered.translation.x, _x.transformFiltered.translation.y, _x.transformFiltered.translation.z, _x.transformFiltered.rotation.x, _x.transformFiltered.rotation.y, _x.transformFiltered.rotation.z, _x.transformFiltered.rotation.w, _x.transformGroundTruth.translation.x, _x.transformGroundTruth.translation.y, _x.transformGroundTruth.translation.z, _x.transformGroundTruth.rotation.x, _x.transformGroundTruth.rotation.y, _x.transformGroundTruth.rotation.z, _x.transformGroundTruth.rotation.w, _x.guessVelocity.translation.x, _x.guessVelocity.translation.y, _x.guessVelocity.translation.z, _x.guessVelocity.rotation.x, _x.guessVelocity.rotation.y, _x.guessVelocity.rotation.z, _x.guessVelocity.rotation.w, _x.type))
      length = len(self.wordsKeys)
      buff.write(_struct_I.pack(length))
      pattern = '<%si'%length
      buff.write(struct.Struct(pattern).pack(*self.wordsKeys))
      length = len(self.wordsValues)
      buff.write(_struct_I.pack(length))
      for val1 in self.wordsValues:
        _v1 = val1.pt
        _x = _v1
        buff.write(_get_struct_2f().pack(_x.x, _x.y))
        _x = val1
        buff.write(_get_struct_3f2i().pack(_x.size, _x.angle, _x.response, _x.octave, _x.class_id))
      length = len(self.wordMatches)
      buff.write(_struct_I.pack(length))
      pattern = '<%si'%length
      buff.write(struct.Struct(pattern).pack(*self.wordMatches))
      length = len(self.wordInliers)
      buff.write(_struct_I.pack(length))
      pattern = '<%si'%length
      buff.write(struct.Struct(pattern).pack(*self.wordInliers))
      length = len(self.localMapKeys)
      buff.write(_struct_I.pack(length))
      pattern = '<%si'%length
      buff.write(struct.Struct(pattern).pack(*self.localMapKeys))
      length = len(self.localMapValues)
      buff.write(_struct_I.pack(length))
      for val1 in self.localMapValues:
        _x = val1
        buff.write(_get_struct_3f().pack(_x.x, _x.y, _x.z))
      _x = self.localScanMap
      length = len(_x)
      # - if encoded as a list instead, serialize as bytes instead of string
      if type(_x) in [list, tuple]:
        buff.write(struct.Struct('<I%sB'%length).pack(length, *_x))
      else:
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      length = len(self.refCorners)
      buff.write(_struct_I.pack(length))
      for val1 in self.refCorners:
        _x = val1
        buff.write(_get_struct_2f().pack(_x.x, _x.y))
      length = len(self.newCorners)
      buff.write(_struct_I.pack(length))
      for val1 in self.newCorners:
        _x = val1
        buff.write(_get_struct_2f().pack(_x.x, _x.y))
      length = len(self.cornerInliers)
      buff.write(_struct_I.pack(length))
      pattern = '<%si'%length
      buff.write(struct.Struct(pattern).pack(*self.cornerInliers))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.header is None:
        self.header = std_msgs.msg.Header()
      if self.transform is None:
        self.transform = geometry_msgs.msg.Transform()
      if self.transformFiltered is None:
        self.transformFiltered = geometry_msgs.msg.Transform()
      if self.transformGroundTruth is None:
        self.transformGroundTruth = geometry_msgs.msg.Transform()
      if self.guessVelocity is None:
        self.guessVelocity = geometry_msgs.msg.Transform()
      if self.wordsValues is None:
        self.wordsValues = None
      if self.localMapValues is None:
        self.localMapValues = None
      if self.refCorners is None:
        self.refCorners = None
      if self.newCorners is None:
        self.newCorners = None
      end = 0
      _x = self
      start = end
      end += 12
      (_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs,) = _get_struct_3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.header.frame_id = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.header.frame_id = str[start:end]
      _x = self
      start = end
      end += 33
      (_x.lost, _x.matches, _x.inliers, _x.icpInliersRatio, _x.icpRotation, _x.icpTranslation, _x.icpStructuralComplexity, _x.icpStructuralDistribution, _x.icpCorrespondences,) = _get_struct_B2i5fi().unpack(str[start:end])
      self.lost = bool(self.lost)
      start = end
      end += 288
      self.covariance = _get_struct_36d().unpack(str[start:end])
      _x = self
      start = end
      end += 289
      (_x.features, _x.localMapSize, _x.localScanMapSize, _x.localKeyFrames, _x.localBundleOutliers, _x.localBundleConstraints, _x.localBundleTime, _x.keyFrameAdded, _x.timeEstimation, _x.timeParticleFiltering, _x.stamp, _x.interval, _x.distanceTravelled, _x.memoryUsage, _x.gravityRollError, _x.gravityPitchError, _x.transform.translation.x, _x.transform.translation.y, _x.transform.translation.z, _x.transform.rotation.x, _x.transform.rotation.y, _x.transform.rotation.z, _x.transform.rotation.w, _x.transformFiltered.translation.x, _x.transformFiltered.translation.y, _x.transformFiltered.translation.z, _x.transformFiltered.rotation.x, _x.transformFiltered.rotation.y, _x.transformFiltered.rotation.z, _x.transformFiltered.rotation.w, _x.transformGroundTruth.translation.x, _x.transformGroundTruth.translation.y, _x.transformGroundTruth.translation.z, _x.transformGroundTruth.rotation.x, _x.transformGroundTruth.rotation.y, _x.transformGroundTruth.rotation.z, _x.transformGroundTruth.rotation.w, _x.guessVelocity.translation.x, _x.guessVelocity.translation.y, _x.guessVelocity.translation.z, _x.guessVelocity.rotation.x, _x.guessVelocity.rotation.y, _x.guessVelocity.rotation.z, _x.guessVelocity.rotation.w, _x.type,) = _get_struct_6ifB5fi2f28di().unpack(str[start:end])
      self.keyFrameAdded = bool(self.keyFrameAdded)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%si'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.wordsKeys = s.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.wordsValues = []
      for i in range(0, length):
        val1 = rtabmap_ros.msg.KeyPoint()
        _v2 = val1.pt
        _x = _v2
        start = end
        end += 8
        (_x.x, _x.y,) = _get_struct_2f().unpack(str[start:end])
        _x = val1
        start = end
        end += 20
        (_x.size, _x.angle, _x.response, _x.octave, _x.class_id,) = _get_struct_3f2i().unpack(str[start:end])
        self.wordsValues.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%si'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.wordMatches = s.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%si'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.wordInliers = s.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%si'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.localMapKeys = s.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.localMapValues = []
      for i in range(0, length):
        val1 = rtabmap_ros.msg.Point3f()
        _x = val1
        start = end
        end += 12
        (_x.x, _x.y, _x.z,) = _get_struct_3f().unpack(str[start:end])
        self.localMapValues.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      self.localScanMap = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.refCorners = []
      for i in range(0, length):
        val1 = rtabmap_ros.msg.Point2f()
        _x = val1
        start = end
        end += 8
        (_x.x, _x.y,) = _get_struct_2f().unpack(str[start:end])
        self.refCorners.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.newCorners = []
      for i in range(0, length):
        val1 = rtabmap_ros.msg.Point2f()
        _x = val1
        start = end
        end += 8
        (_x.x, _x.y,) = _get_struct_2f().unpack(str[start:end])
        self.newCorners.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%si'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.cornerInliers = s.unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_3I().pack(_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs))
      _x = self.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_B2i5fi().pack(_x.lost, _x.matches, _x.inliers, _x.icpInliersRatio, _x.icpRotation, _x.icpTranslation, _x.icpStructuralComplexity, _x.icpStructuralDistribution, _x.icpCorrespondences))
      buff.write(self.covariance.tostring())
      _x = self
      buff.write(_get_struct_6ifB5fi2f28di().pack(_x.features, _x.localMapSize, _x.localScanMapSize, _x.localKeyFrames, _x.localBundleOutliers, _x.localBundleConstraints, _x.localBundleTime, _x.keyFrameAdded, _x.timeEstimation, _x.timeParticleFiltering, _x.stamp, _x.interval, _x.distanceTravelled, _x.memoryUsage, _x.gravityRollError, _x.gravityPitchError, _x.transform.translation.x, _x.transform.translation.y, _x.transform.translation.z, _x.transform.rotation.x, _x.transform.rotation.y, _x.transform.rotation.z, _x.transform.rotation.w, _x.transformFiltered.translation.x, _x.transformFiltered.translation.y, _x.transformFiltered.translation.z, _x.transformFiltered.rotation.x, _x.transformFiltered.rotation.y, _x.transformFiltered.rotation.z, _x.transformFiltered.rotation.w, _x.transformGroundTruth.translation.x, _x.transformGroundTruth.translation.y, _x.transformGroundTruth.translation.z, _x.transformGroundTruth.rotation.x, _x.transformGroundTruth.rotation.y, _x.transformGroundTruth.rotation.z, _x.transformGroundTruth.rotation.w, _x.guessVelocity.translation.x, _x.guessVelocity.translation.y, _x.guessVelocity.translation.z, _x.guessVelocity.rotation.x, _x.guessVelocity.rotation.y, _x.guessVelocity.rotation.z, _x.guessVelocity.rotation.w, _x.type))
      length = len(self.wordsKeys)
      buff.write(_struct_I.pack(length))
      pattern = '<%si'%length
      buff.write(self.wordsKeys.tostring())
      length = len(self.wordsValues)
      buff.write(_struct_I.pack(length))
      for val1 in self.wordsValues:
        _v3 = val1.pt
        _x = _v3
        buff.write(_get_struct_2f().pack(_x.x, _x.y))
        _x = val1
        buff.write(_get_struct_3f2i().pack(_x.size, _x.angle, _x.response, _x.octave, _x.class_id))
      length = len(self.wordMatches)
      buff.write(_struct_I.pack(length))
      pattern = '<%si'%length
      buff.write(self.wordMatches.tostring())
      length = len(self.wordInliers)
      buff.write(_struct_I.pack(length))
      pattern = '<%si'%length
      buff.write(self.wordInliers.tostring())
      length = len(self.localMapKeys)
      buff.write(_struct_I.pack(length))
      pattern = '<%si'%length
      buff.write(self.localMapKeys.tostring())
      length = len(self.localMapValues)
      buff.write(_struct_I.pack(length))
      for val1 in self.localMapValues:
        _x = val1
        buff.write(_get_struct_3f().pack(_x.x, _x.y, _x.z))
      _x = self.localScanMap
      length = len(_x)
      # - if encoded as a list instead, serialize as bytes instead of string
      if type(_x) in [list, tuple]:
        buff.write(struct.Struct('<I%sB'%length).pack(length, *_x))
      else:
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      length = len(self.refCorners)
      buff.write(_struct_I.pack(length))
      for val1 in self.refCorners:
        _x = val1
        buff.write(_get_struct_2f().pack(_x.x, _x.y))
      length = len(self.newCorners)
      buff.write(_struct_I.pack(length))
      for val1 in self.newCorners:
        _x = val1
        buff.write(_get_struct_2f().pack(_x.x, _x.y))
      length = len(self.cornerInliers)
      buff.write(_struct_I.pack(length))
      pattern = '<%si'%length
      buff.write(self.cornerInliers.tostring())
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.header is None:
        self.header = std_msgs.msg.Header()
      if self.transform is None:
        self.transform = geometry_msgs.msg.Transform()
      if self.transformFiltered is None:
        self.transformFiltered = geometry_msgs.msg.Transform()
      if self.transformGroundTruth is None:
        self.transformGroundTruth = geometry_msgs.msg.Transform()
      if self.guessVelocity is None:
        self.guessVelocity = geometry_msgs.msg.Transform()
      if self.wordsValues is None:
        self.wordsValues = None
      if self.localMapValues is None:
        self.localMapValues = None
      if self.refCorners is None:
        self.refCorners = None
      if self.newCorners is None:
        self.newCorners = None
      end = 0
      _x = self
      start = end
      end += 12
      (_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs,) = _get_struct_3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.header.frame_id = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.header.frame_id = str[start:end]
      _x = self
      start = end
      end += 33
      (_x.lost, _x.matches, _x.inliers, _x.icpInliersRatio, _x.icpRotation, _x.icpTranslation, _x.icpStructuralComplexity, _x.icpStructuralDistribution, _x.icpCorrespondences,) = _get_struct_B2i5fi().unpack(str[start:end])
      self.lost = bool(self.lost)
      start = end
      end += 288
      self.covariance = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=36)
      _x = self
      start = end
      end += 289
      (_x.features, _x.localMapSize, _x.localScanMapSize, _x.localKeyFrames, _x.localBundleOutliers, _x.localBundleConstraints, _x.localBundleTime, _x.keyFrameAdded, _x.timeEstimation, _x.timeParticleFiltering, _x.stamp, _x.interval, _x.distanceTravelled, _x.memoryUsage, _x.gravityRollError, _x.gravityPitchError, _x.transform.translation.x, _x.transform.translation.y, _x.transform.translation.z, _x.transform.rotation.x, _x.transform.rotation.y, _x.transform.rotation.z, _x.transform.rotation.w, _x.transformFiltered.translation.x, _x.transformFiltered.translation.y, _x.transformFiltered.translation.z, _x.transformFiltered.rotation.x, _x.transformFiltered.rotation.y, _x.transformFiltered.rotation.z, _x.transformFiltered.rotation.w, _x.transformGroundTruth.translation.x, _x.transformGroundTruth.translation.y, _x.transformGroundTruth.translation.z, _x.transformGroundTruth.rotation.x, _x.transformGroundTruth.rotation.y, _x.transformGroundTruth.rotation.z, _x.transformGroundTruth.rotation.w, _x.guessVelocity.translation.x, _x.guessVelocity.translation.y, _x.guessVelocity.translation.z, _x.guessVelocity.rotation.x, _x.guessVelocity.rotation.y, _x.guessVelocity.rotation.z, _x.guessVelocity.rotation.w, _x.type,) = _get_struct_6ifB5fi2f28di().unpack(str[start:end])
      self.keyFrameAdded = bool(self.keyFrameAdded)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%si'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.wordsKeys = numpy.frombuffer(str[start:end], dtype=numpy.int32, count=length)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.wordsValues = []
      for i in range(0, length):
        val1 = rtabmap_ros.msg.KeyPoint()
        _v4 = val1.pt
        _x = _v4
        start = end
        end += 8
        (_x.x, _x.y,) = _get_struct_2f().unpack(str[start:end])
        _x = val1
        start = end
        end += 20
        (_x.size, _x.angle, _x.response, _x.octave, _x.class_id,) = _get_struct_3f2i().unpack(str[start:end])
        self.wordsValues.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%si'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.wordMatches = numpy.frombuffer(str[start:end], dtype=numpy.int32, count=length)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%si'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.wordInliers = numpy.frombuffer(str[start:end], dtype=numpy.int32, count=length)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%si'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.localMapKeys = numpy.frombuffer(str[start:end], dtype=numpy.int32, count=length)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.localMapValues = []
      for i in range(0, length):
        val1 = rtabmap_ros.msg.Point3f()
        _x = val1
        start = end
        end += 12
        (_x.x, _x.y, _x.z,) = _get_struct_3f().unpack(str[start:end])
        self.localMapValues.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      self.localScanMap = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.refCorners = []
      for i in range(0, length):
        val1 = rtabmap_ros.msg.Point2f()
        _x = val1
        start = end
        end += 8
        (_x.x, _x.y,) = _get_struct_2f().unpack(str[start:end])
        self.refCorners.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.newCorners = []
      for i in range(0, length):
        val1 = rtabmap_ros.msg.Point2f()
        _x = val1
        start = end
        end += 8
        (_x.x, _x.y,) = _get_struct_2f().unpack(str[start:end])
        self.newCorners.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%si'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.cornerInliers = numpy.frombuffer(str[start:end], dtype=numpy.int32, count=length)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_2f = None
def _get_struct_2f():
    global _struct_2f
    if _struct_2f is None:
        _struct_2f = struct.Struct("<2f")
    return _struct_2f
_struct_36d = None
def _get_struct_36d():
    global _struct_36d
    if _struct_36d is None:
        _struct_36d = struct.Struct("<36d")
    return _struct_36d
_struct_3I = None
def _get_struct_3I():
    global _struct_3I
    if _struct_3I is None:
        _struct_3I = struct.Struct("<3I")
    return _struct_3I
_struct_3f = None
def _get_struct_3f():
    global _struct_3f
    if _struct_3f is None:
        _struct_3f = struct.Struct("<3f")
    return _struct_3f
_struct_3f2i = None
def _get_struct_3f2i():
    global _struct_3f2i
    if _struct_3f2i is None:
        _struct_3f2i = struct.Struct("<3f2i")
    return _struct_3f2i
_struct_6ifB5fi2f28di = None
def _get_struct_6ifB5fi2f28di():
    global _struct_6ifB5fi2f28di
    if _struct_6ifB5fi2f28di is None:
        _struct_6ifB5fi2f28di = struct.Struct("<6ifB5fi2f28di")
    return _struct_6ifB5fi2f28di
_struct_B2i5fi = None
def _get_struct_B2i5fi():
    global _struct_B2i5fi
    if _struct_B2i5fi is None:
        _struct_B2i5fi = struct.Struct("<B2i5fi")
    return _struct_B2i5fi
