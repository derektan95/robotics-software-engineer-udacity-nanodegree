# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from rtabmap_ros/NodeData.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import geometry_msgs.msg
import rtabmap_ros.msg
import std_msgs.msg

class NodeData(genpy.Message):
  _md5sum = "1ed748d5a09b9a90c8d1e3db691aa75e"
  _type = "rtabmap_ros/NodeData"
  _has_header = False  # flag to mark the presence of a Header object
  _full_text = """
int32 id
int32 mapId
int32 weight
float64 stamp
string label

# Pose from odometry not corrected
geometry_msgs/Pose pose

# Ground truth (optional)
geometry_msgs/Pose groundTruthPose

# GPS (optional)
GPS gps

# compressed image in /camera_link frame
# use rtabmap::util3d::uncompressImage() from "rtabmap/core/util3d.h"
uint8[] image

# compressed depth image in /camera_link frame
# use rtabmap::util3d::uncompressImage() from "rtabmap/core/util3d.h"
uint8[] depth

# Camera models
float32[] fx
float32[] fy
float32[] cx
float32[] cy
float32[] width
float32[] height
float32 baseline
# local transform (/base_link -> /camera_link)
geometry_msgs/Transform[] localTransform

# compressed 2D or 3D laser scan
# use rtabmap::util3d::uncompressData() from "rtabmap/core/util3d.h"
uint8[] laserScan
int32 laserScanMaxPts
float32 laserScanMaxRange
int32 laserScanFormat
# local transform (/base_link -> /base_laser)
geometry_msgs/Transform laserScanLocalTransform

# compressed user data
# use rtabmap::util3d::uncompressData() from "rtabmap/core/util3d.h"
uint8[] userData

# compressed occupancy grid
# use rtabmap::util3d::uncompressData() from "rtabmap/core/util3d.h"
uint8[] grid_ground
uint8[] grid_obstacles
uint8[] grid_empty_cells
float32 grid_cell_size
Point3f grid_view_point

# std::multimap<wordId, cv::Keypoint>
# std::multimap<wordId, cv::Point3f>
int32[] wordIds
KeyPoint[] wordKpts
Point3f[] wordPts
# compressed descriptors
# use rtabmap::util3d::uncompressData() from "rtabmap/core/util3d.h"
uint8[] wordDescriptors

GlobalDescriptor[] globalDescriptors

EnvSensor[] env_sensors

================================================================================
MSG: geometry_msgs/Pose
# A representation of pose in free space, composed of position and orientation. 
Point position
Quaternion orientation

================================================================================
MSG: geometry_msgs/Point
# This contains the position of a point in free space
float64 x
float64 y
float64 z

================================================================================
MSG: geometry_msgs/Quaternion
# This represents an orientation in free space in quaternion form.

float64 x
float64 y
float64 z
float64 w

================================================================================
MSG: rtabmap_ros/GPS

float64 stamp      # in seconds
float64 longitude  # DD format
float64 latitude   # DD format
float64 altitude   # in meters
float64 error      # in meters
float64 bearing    # North 0->360 deg
================================================================================
MSG: geometry_msgs/Transform
# This represents the transform between two coordinate frames in free space.

Vector3 translation
Quaternion rotation

================================================================================
MSG: geometry_msgs/Vector3
# This represents a vector in free space. 
# It is only meant to represent a direction. Therefore, it does not
# make sense to apply a translation to it (e.g., when applying a 
# generic rigid transformation to a Vector3, tf2 will only apply the
# rotation). If you want your data to be translatable too, use the
# geometry_msgs/Point message instead.

float64 x
float64 y
float64 z
================================================================================
MSG: rtabmap_ros/Point3f
#class cv::Point3f
#{
#    float x;
#    float y;
#    float z;
#}

float32 x
float32 y
float32 z
================================================================================
MSG: rtabmap_ros/KeyPoint
#class cv::KeyPoint
#{
#    Point2f pt;
#    float size;
#    float angle;
#    float response;
#    int octave;
#    int class_id;
#}

Point2f pt
float32 size
float32 angle
float32 response
int32 octave
int32 class_id
================================================================================
MSG: rtabmap_ros/Point2f
#class cv::Point2f
#{
#    float x;
#    float y;
#}

float32 x
float32 y
================================================================================
MSG: rtabmap_ros/GlobalDescriptor

Header header

# compressed global descriptor
# use rtabmap::util3d::uncompressData() from "rtabmap/core/util3d.h"
int32 type
uint8[] info
uint8[] data
================================================================================
MSG: std_msgs/Header
# Standard metadata for higher-level stamped data types.
# This is generally used to communicate timestamped data 
# in a particular coordinate frame.
# 
# sequence ID: consecutively increasing ID 
uint32 seq
#Two-integer timestamp that is expressed as:
# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')
# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')
# time-handling sugar is provided by the client library
time stamp
#Frame this data is associated with
# 0: no frame
# 1: global frame
string frame_id

================================================================================
MSG: rtabmap_ros/EnvSensor

Header header

# EnvSensor
int32 type
float64 value"""
  __slots__ = ['id','mapId','weight','stamp','label','pose','groundTruthPose','gps','image','depth','fx','fy','cx','cy','width','height','baseline','localTransform','laserScan','laserScanMaxPts','laserScanMaxRange','laserScanFormat','laserScanLocalTransform','userData','grid_ground','grid_obstacles','grid_empty_cells','grid_cell_size','grid_view_point','wordIds','wordKpts','wordPts','wordDescriptors','globalDescriptors','env_sensors']
  _slot_types = ['int32','int32','int32','float64','string','geometry_msgs/Pose','geometry_msgs/Pose','rtabmap_ros/GPS','uint8[]','uint8[]','float32[]','float32[]','float32[]','float32[]','float32[]','float32[]','float32','geometry_msgs/Transform[]','uint8[]','int32','float32','int32','geometry_msgs/Transform','uint8[]','uint8[]','uint8[]','uint8[]','float32','rtabmap_ros/Point3f','int32[]','rtabmap_ros/KeyPoint[]','rtabmap_ros/Point3f[]','uint8[]','rtabmap_ros/GlobalDescriptor[]','rtabmap_ros/EnvSensor[]']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       id,mapId,weight,stamp,label,pose,groundTruthPose,gps,image,depth,fx,fy,cx,cy,width,height,baseline,localTransform,laserScan,laserScanMaxPts,laserScanMaxRange,laserScanFormat,laserScanLocalTransform,userData,grid_ground,grid_obstacles,grid_empty_cells,grid_cell_size,grid_view_point,wordIds,wordKpts,wordPts,wordDescriptors,globalDescriptors,env_sensors

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(NodeData, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.id is None:
        self.id = 0
      if self.mapId is None:
        self.mapId = 0
      if self.weight is None:
        self.weight = 0
      if self.stamp is None:
        self.stamp = 0.
      if self.label is None:
        self.label = ''
      if self.pose is None:
        self.pose = geometry_msgs.msg.Pose()
      if self.groundTruthPose is None:
        self.groundTruthPose = geometry_msgs.msg.Pose()
      if self.gps is None:
        self.gps = rtabmap_ros.msg.GPS()
      if self.image is None:
        self.image = b''
      if self.depth is None:
        self.depth = b''
      if self.fx is None:
        self.fx = []
      if self.fy is None:
        self.fy = []
      if self.cx is None:
        self.cx = []
      if self.cy is None:
        self.cy = []
      if self.width is None:
        self.width = []
      if self.height is None:
        self.height = []
      if self.baseline is None:
        self.baseline = 0.
      if self.localTransform is None:
        self.localTransform = []
      if self.laserScan is None:
        self.laserScan = b''
      if self.laserScanMaxPts is None:
        self.laserScanMaxPts = 0
      if self.laserScanMaxRange is None:
        self.laserScanMaxRange = 0.
      if self.laserScanFormat is None:
        self.laserScanFormat = 0
      if self.laserScanLocalTransform is None:
        self.laserScanLocalTransform = geometry_msgs.msg.Transform()
      if self.userData is None:
        self.userData = b''
      if self.grid_ground is None:
        self.grid_ground = b''
      if self.grid_obstacles is None:
        self.grid_obstacles = b''
      if self.grid_empty_cells is None:
        self.grid_empty_cells = b''
      if self.grid_cell_size is None:
        self.grid_cell_size = 0.
      if self.grid_view_point is None:
        self.grid_view_point = rtabmap_ros.msg.Point3f()
      if self.wordIds is None:
        self.wordIds = []
      if self.wordKpts is None:
        self.wordKpts = []
      if self.wordPts is None:
        self.wordPts = []
      if self.wordDescriptors is None:
        self.wordDescriptors = b''
      if self.globalDescriptors is None:
        self.globalDescriptors = []
      if self.env_sensors is None:
        self.env_sensors = []
    else:
      self.id = 0
      self.mapId = 0
      self.weight = 0
      self.stamp = 0.
      self.label = ''
      self.pose = geometry_msgs.msg.Pose()
      self.groundTruthPose = geometry_msgs.msg.Pose()
      self.gps = rtabmap_ros.msg.GPS()
      self.image = b''
      self.depth = b''
      self.fx = []
      self.fy = []
      self.cx = []
      self.cy = []
      self.width = []
      self.height = []
      self.baseline = 0.
      self.localTransform = []
      self.laserScan = b''
      self.laserScanMaxPts = 0
      self.laserScanMaxRange = 0.
      self.laserScanFormat = 0
      self.laserScanLocalTransform = geometry_msgs.msg.Transform()
      self.userData = b''
      self.grid_ground = b''
      self.grid_obstacles = b''
      self.grid_empty_cells = b''
      self.grid_cell_size = 0.
      self.grid_view_point = rtabmap_ros.msg.Point3f()
      self.wordIds = []
      self.wordKpts = []
      self.wordPts = []
      self.wordDescriptors = b''
      self.globalDescriptors = []
      self.env_sensors = []

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_3id().pack(_x.id, _x.mapId, _x.weight, _x.stamp))
      _x = self.label
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_20d().pack(_x.pose.position.x, _x.pose.position.y, _x.pose.position.z, _x.pose.orientation.x, _x.pose.orientation.y, _x.pose.orientation.z, _x.pose.orientation.w, _x.groundTruthPose.position.x, _x.groundTruthPose.position.y, _x.groundTruthPose.position.z, _x.groundTruthPose.orientation.x, _x.groundTruthPose.orientation.y, _x.groundTruthPose.orientation.z, _x.groundTruthPose.orientation.w, _x.gps.stamp, _x.gps.longitude, _x.gps.latitude, _x.gps.altitude, _x.gps.error, _x.gps.bearing))
      _x = self.image
      length = len(_x)
      # - if encoded as a list instead, serialize as bytes instead of string
      if type(_x) in [list, tuple]:
        buff.write(struct.Struct('<I%sB'%length).pack(length, *_x))
      else:
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self.depth
      length = len(_x)
      # - if encoded as a list instead, serialize as bytes instead of string
      if type(_x) in [list, tuple]:
        buff.write(struct.Struct('<I%sB'%length).pack(length, *_x))
      else:
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      length = len(self.fx)
      buff.write(_struct_I.pack(length))
      pattern = '<%sf'%length
      buff.write(struct.Struct(pattern).pack(*self.fx))
      length = len(self.fy)
      buff.write(_struct_I.pack(length))
      pattern = '<%sf'%length
      buff.write(struct.Struct(pattern).pack(*self.fy))
      length = len(self.cx)
      buff.write(_struct_I.pack(length))
      pattern = '<%sf'%length
      buff.write(struct.Struct(pattern).pack(*self.cx))
      length = len(self.cy)
      buff.write(_struct_I.pack(length))
      pattern = '<%sf'%length
      buff.write(struct.Struct(pattern).pack(*self.cy))
      length = len(self.width)
      buff.write(_struct_I.pack(length))
      pattern = '<%sf'%length
      buff.write(struct.Struct(pattern).pack(*self.width))
      length = len(self.height)
      buff.write(_struct_I.pack(length))
      pattern = '<%sf'%length
      buff.write(struct.Struct(pattern).pack(*self.height))
      _x = self.baseline
      buff.write(_get_struct_f().pack(_x))
      length = len(self.localTransform)
      buff.write(_struct_I.pack(length))
      for val1 in self.localTransform:
        _v1 = val1.translation
        _x = _v1
        buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
        _v2 = val1.rotation
        _x = _v2
        buff.write(_get_struct_4d().pack(_x.x, _x.y, _x.z, _x.w))
      _x = self.laserScan
      length = len(_x)
      # - if encoded as a list instead, serialize as bytes instead of string
      if type(_x) in [list, tuple]:
        buff.write(struct.Struct('<I%sB'%length).pack(length, *_x))
      else:
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_ifi7d().pack(_x.laserScanMaxPts, _x.laserScanMaxRange, _x.laserScanFormat, _x.laserScanLocalTransform.translation.x, _x.laserScanLocalTransform.translation.y, _x.laserScanLocalTransform.translation.z, _x.laserScanLocalTransform.rotation.x, _x.laserScanLocalTransform.rotation.y, _x.laserScanLocalTransform.rotation.z, _x.laserScanLocalTransform.rotation.w))
      _x = self.userData
      length = len(_x)
      # - if encoded as a list instead, serialize as bytes instead of string
      if type(_x) in [list, tuple]:
        buff.write(struct.Struct('<I%sB'%length).pack(length, *_x))
      else:
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self.grid_ground
      length = len(_x)
      # - if encoded as a list instead, serialize as bytes instead of string
      if type(_x) in [list, tuple]:
        buff.write(struct.Struct('<I%sB'%length).pack(length, *_x))
      else:
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self.grid_obstacles
      length = len(_x)
      # - if encoded as a list instead, serialize as bytes instead of string
      if type(_x) in [list, tuple]:
        buff.write(struct.Struct('<I%sB'%length).pack(length, *_x))
      else:
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self.grid_empty_cells
      length = len(_x)
      # - if encoded as a list instead, serialize as bytes instead of string
      if type(_x) in [list, tuple]:
        buff.write(struct.Struct('<I%sB'%length).pack(length, *_x))
      else:
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_4f().pack(_x.grid_cell_size, _x.grid_view_point.x, _x.grid_view_point.y, _x.grid_view_point.z))
      length = len(self.wordIds)
      buff.write(_struct_I.pack(length))
      pattern = '<%si'%length
      buff.write(struct.Struct(pattern).pack(*self.wordIds))
      length = len(self.wordKpts)
      buff.write(_struct_I.pack(length))
      for val1 in self.wordKpts:
        _v3 = val1.pt
        _x = _v3
        buff.write(_get_struct_2f().pack(_x.x, _x.y))
        _x = val1
        buff.write(_get_struct_3f2i().pack(_x.size, _x.angle, _x.response, _x.octave, _x.class_id))
      length = len(self.wordPts)
      buff.write(_struct_I.pack(length))
      for val1 in self.wordPts:
        _x = val1
        buff.write(_get_struct_3f().pack(_x.x, _x.y, _x.z))
      _x = self.wordDescriptors
      length = len(_x)
      # - if encoded as a list instead, serialize as bytes instead of string
      if type(_x) in [list, tuple]:
        buff.write(struct.Struct('<I%sB'%length).pack(length, *_x))
      else:
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      length = len(self.globalDescriptors)
      buff.write(_struct_I.pack(length))
      for val1 in self.globalDescriptors:
        _v4 = val1.header
        _x = _v4.seq
        buff.write(_get_struct_I().pack(_x))
        _v5 = _v4.stamp
        _x = _v5
        buff.write(_get_struct_2I().pack(_x.secs, _x.nsecs))
        _x = _v4.frame_id
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
        _x = val1.type
        buff.write(_get_struct_i().pack(_x))
        _x = val1.info
        length = len(_x)
        # - if encoded as a list instead, serialize as bytes instead of string
        if type(_x) in [list, tuple]:
          buff.write(struct.Struct('<I%sB'%length).pack(length, *_x))
        else:
          buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
        _x = val1.data
        length = len(_x)
        # - if encoded as a list instead, serialize as bytes instead of string
        if type(_x) in [list, tuple]:
          buff.write(struct.Struct('<I%sB'%length).pack(length, *_x))
        else:
          buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      length = len(self.env_sensors)
      buff.write(_struct_I.pack(length))
      for val1 in self.env_sensors:
        _v6 = val1.header
        _x = _v6.seq
        buff.write(_get_struct_I().pack(_x))
        _v7 = _v6.stamp
        _x = _v7
        buff.write(_get_struct_2I().pack(_x.secs, _x.nsecs))
        _x = _v6.frame_id
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
        _x = val1
        buff.write(_get_struct_id().pack(_x.type, _x.value))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.pose is None:
        self.pose = geometry_msgs.msg.Pose()
      if self.groundTruthPose is None:
        self.groundTruthPose = geometry_msgs.msg.Pose()
      if self.gps is None:
        self.gps = rtabmap_ros.msg.GPS()
      if self.localTransform is None:
        self.localTransform = None
      if self.laserScanLocalTransform is None:
        self.laserScanLocalTransform = geometry_msgs.msg.Transform()
      if self.grid_view_point is None:
        self.grid_view_point = rtabmap_ros.msg.Point3f()
      if self.wordKpts is None:
        self.wordKpts = None
      if self.wordPts is None:
        self.wordPts = None
      if self.globalDescriptors is None:
        self.globalDescriptors = None
      if self.env_sensors is None:
        self.env_sensors = None
      end = 0
      _x = self
      start = end
      end += 20
      (_x.id, _x.mapId, _x.weight, _x.stamp,) = _get_struct_3id().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.label = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.label = str[start:end]
      _x = self
      start = end
      end += 160
      (_x.pose.position.x, _x.pose.position.y, _x.pose.position.z, _x.pose.orientation.x, _x.pose.orientation.y, _x.pose.orientation.z, _x.pose.orientation.w, _x.groundTruthPose.position.x, _x.groundTruthPose.position.y, _x.groundTruthPose.position.z, _x.groundTruthPose.orientation.x, _x.groundTruthPose.orientation.y, _x.groundTruthPose.orientation.z, _x.groundTruthPose.orientation.w, _x.gps.stamp, _x.gps.longitude, _x.gps.latitude, _x.gps.altitude, _x.gps.error, _x.gps.bearing,) = _get_struct_20d().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      self.image = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      self.depth = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sf'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.fx = s.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sf'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.fy = s.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sf'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.cx = s.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sf'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.cy = s.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sf'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.width = s.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sf'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.height = s.unpack(str[start:end])
      start = end
      end += 4
      (self.baseline,) = _get_struct_f().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.localTransform = []
      for i in range(0, length):
        val1 = geometry_msgs.msg.Transform()
        _v8 = val1.translation
        _x = _v8
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
        _v9 = val1.rotation
        _x = _v9
        start = end
        end += 32
        (_x.x, _x.y, _x.z, _x.w,) = _get_struct_4d().unpack(str[start:end])
        self.localTransform.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      self.laserScan = str[start:end]
      _x = self
      start = end
      end += 68
      (_x.laserScanMaxPts, _x.laserScanMaxRange, _x.laserScanFormat, _x.laserScanLocalTransform.translation.x, _x.laserScanLocalTransform.translation.y, _x.laserScanLocalTransform.translation.z, _x.laserScanLocalTransform.rotation.x, _x.laserScanLocalTransform.rotation.y, _x.laserScanLocalTransform.rotation.z, _x.laserScanLocalTransform.rotation.w,) = _get_struct_ifi7d().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      self.userData = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      self.grid_ground = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      self.grid_obstacles = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      self.grid_empty_cells = str[start:end]
      _x = self
      start = end
      end += 16
      (_x.grid_cell_size, _x.grid_view_point.x, _x.grid_view_point.y, _x.grid_view_point.z,) = _get_struct_4f().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%si'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.wordIds = s.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.wordKpts = []
      for i in range(0, length):
        val1 = rtabmap_ros.msg.KeyPoint()
        _v10 = val1.pt
        _x = _v10
        start = end
        end += 8
        (_x.x, _x.y,) = _get_struct_2f().unpack(str[start:end])
        _x = val1
        start = end
        end += 20
        (_x.size, _x.angle, _x.response, _x.octave, _x.class_id,) = _get_struct_3f2i().unpack(str[start:end])
        self.wordKpts.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.wordPts = []
      for i in range(0, length):
        val1 = rtabmap_ros.msg.Point3f()
        _x = val1
        start = end
        end += 12
        (_x.x, _x.y, _x.z,) = _get_struct_3f().unpack(str[start:end])
        self.wordPts.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      self.wordDescriptors = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.globalDescriptors = []
      for i in range(0, length):
        val1 = rtabmap_ros.msg.GlobalDescriptor()
        _v11 = val1.header
        start = end
        end += 4
        (_v11.seq,) = _get_struct_I().unpack(str[start:end])
        _v12 = _v11.stamp
        _x = _v12
        start = end
        end += 8
        (_x.secs, _x.nsecs,) = _get_struct_2I().unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          _v11.frame_id = str[start:end].decode('utf-8', 'rosmsg')
        else:
          _v11.frame_id = str[start:end]
        start = end
        end += 4
        (val1.type,) = _get_struct_i().unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        val1.info = str[start:end]
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        val1.data = str[start:end]
        self.globalDescriptors.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.env_sensors = []
      for i in range(0, length):
        val1 = rtabmap_ros.msg.EnvSensor()
        _v13 = val1.header
        start = end
        end += 4
        (_v13.seq,) = _get_struct_I().unpack(str[start:end])
        _v14 = _v13.stamp
        _x = _v14
        start = end
        end += 8
        (_x.secs, _x.nsecs,) = _get_struct_2I().unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          _v13.frame_id = str[start:end].decode('utf-8', 'rosmsg')
        else:
          _v13.frame_id = str[start:end]
        _x = val1
        start = end
        end += 12
        (_x.type, _x.value,) = _get_struct_id().unpack(str[start:end])
        self.env_sensors.append(val1)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_3id().pack(_x.id, _x.mapId, _x.weight, _x.stamp))
      _x = self.label
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_20d().pack(_x.pose.position.x, _x.pose.position.y, _x.pose.position.z, _x.pose.orientation.x, _x.pose.orientation.y, _x.pose.orientation.z, _x.pose.orientation.w, _x.groundTruthPose.position.x, _x.groundTruthPose.position.y, _x.groundTruthPose.position.z, _x.groundTruthPose.orientation.x, _x.groundTruthPose.orientation.y, _x.groundTruthPose.orientation.z, _x.groundTruthPose.orientation.w, _x.gps.stamp, _x.gps.longitude, _x.gps.latitude, _x.gps.altitude, _x.gps.error, _x.gps.bearing))
      _x = self.image
      length = len(_x)
      # - if encoded as a list instead, serialize as bytes instead of string
      if type(_x) in [list, tuple]:
        buff.write(struct.Struct('<I%sB'%length).pack(length, *_x))
      else:
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self.depth
      length = len(_x)
      # - if encoded as a list instead, serialize as bytes instead of string
      if type(_x) in [list, tuple]:
        buff.write(struct.Struct('<I%sB'%length).pack(length, *_x))
      else:
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      length = len(self.fx)
      buff.write(_struct_I.pack(length))
      pattern = '<%sf'%length
      buff.write(self.fx.tostring())
      length = len(self.fy)
      buff.write(_struct_I.pack(length))
      pattern = '<%sf'%length
      buff.write(self.fy.tostring())
      length = len(self.cx)
      buff.write(_struct_I.pack(length))
      pattern = '<%sf'%length
      buff.write(self.cx.tostring())
      length = len(self.cy)
      buff.write(_struct_I.pack(length))
      pattern = '<%sf'%length
      buff.write(self.cy.tostring())
      length = len(self.width)
      buff.write(_struct_I.pack(length))
      pattern = '<%sf'%length
      buff.write(self.width.tostring())
      length = len(self.height)
      buff.write(_struct_I.pack(length))
      pattern = '<%sf'%length
      buff.write(self.height.tostring())
      _x = self.baseline
      buff.write(_get_struct_f().pack(_x))
      length = len(self.localTransform)
      buff.write(_struct_I.pack(length))
      for val1 in self.localTransform:
        _v15 = val1.translation
        _x = _v15
        buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
        _v16 = val1.rotation
        _x = _v16
        buff.write(_get_struct_4d().pack(_x.x, _x.y, _x.z, _x.w))
      _x = self.laserScan
      length = len(_x)
      # - if encoded as a list instead, serialize as bytes instead of string
      if type(_x) in [list, tuple]:
        buff.write(struct.Struct('<I%sB'%length).pack(length, *_x))
      else:
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_ifi7d().pack(_x.laserScanMaxPts, _x.laserScanMaxRange, _x.laserScanFormat, _x.laserScanLocalTransform.translation.x, _x.laserScanLocalTransform.translation.y, _x.laserScanLocalTransform.translation.z, _x.laserScanLocalTransform.rotation.x, _x.laserScanLocalTransform.rotation.y, _x.laserScanLocalTransform.rotation.z, _x.laserScanLocalTransform.rotation.w))
      _x = self.userData
      length = len(_x)
      # - if encoded as a list instead, serialize as bytes instead of string
      if type(_x) in [list, tuple]:
        buff.write(struct.Struct('<I%sB'%length).pack(length, *_x))
      else:
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self.grid_ground
      length = len(_x)
      # - if encoded as a list instead, serialize as bytes instead of string
      if type(_x) in [list, tuple]:
        buff.write(struct.Struct('<I%sB'%length).pack(length, *_x))
      else:
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self.grid_obstacles
      length = len(_x)
      # - if encoded as a list instead, serialize as bytes instead of string
      if type(_x) in [list, tuple]:
        buff.write(struct.Struct('<I%sB'%length).pack(length, *_x))
      else:
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self.grid_empty_cells
      length = len(_x)
      # - if encoded as a list instead, serialize as bytes instead of string
      if type(_x) in [list, tuple]:
        buff.write(struct.Struct('<I%sB'%length).pack(length, *_x))
      else:
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_4f().pack(_x.grid_cell_size, _x.grid_view_point.x, _x.grid_view_point.y, _x.grid_view_point.z))
      length = len(self.wordIds)
      buff.write(_struct_I.pack(length))
      pattern = '<%si'%length
      buff.write(self.wordIds.tostring())
      length = len(self.wordKpts)
      buff.write(_struct_I.pack(length))
      for val1 in self.wordKpts:
        _v17 = val1.pt
        _x = _v17
        buff.write(_get_struct_2f().pack(_x.x, _x.y))
        _x = val1
        buff.write(_get_struct_3f2i().pack(_x.size, _x.angle, _x.response, _x.octave, _x.class_id))
      length = len(self.wordPts)
      buff.write(_struct_I.pack(length))
      for val1 in self.wordPts:
        _x = val1
        buff.write(_get_struct_3f().pack(_x.x, _x.y, _x.z))
      _x = self.wordDescriptors
      length = len(_x)
      # - if encoded as a list instead, serialize as bytes instead of string
      if type(_x) in [list, tuple]:
        buff.write(struct.Struct('<I%sB'%length).pack(length, *_x))
      else:
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      length = len(self.globalDescriptors)
      buff.write(_struct_I.pack(length))
      for val1 in self.globalDescriptors:
        _v18 = val1.header
        _x = _v18.seq
        buff.write(_get_struct_I().pack(_x))
        _v19 = _v18.stamp
        _x = _v19
        buff.write(_get_struct_2I().pack(_x.secs, _x.nsecs))
        _x = _v18.frame_id
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
        _x = val1.type
        buff.write(_get_struct_i().pack(_x))
        _x = val1.info
        length = len(_x)
        # - if encoded as a list instead, serialize as bytes instead of string
        if type(_x) in [list, tuple]:
          buff.write(struct.Struct('<I%sB'%length).pack(length, *_x))
        else:
          buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
        _x = val1.data
        length = len(_x)
        # - if encoded as a list instead, serialize as bytes instead of string
        if type(_x) in [list, tuple]:
          buff.write(struct.Struct('<I%sB'%length).pack(length, *_x))
        else:
          buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      length = len(self.env_sensors)
      buff.write(_struct_I.pack(length))
      for val1 in self.env_sensors:
        _v20 = val1.header
        _x = _v20.seq
        buff.write(_get_struct_I().pack(_x))
        _v21 = _v20.stamp
        _x = _v21
        buff.write(_get_struct_2I().pack(_x.secs, _x.nsecs))
        _x = _v20.frame_id
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
        _x = val1
        buff.write(_get_struct_id().pack(_x.type, _x.value))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.pose is None:
        self.pose = geometry_msgs.msg.Pose()
      if self.groundTruthPose is None:
        self.groundTruthPose = geometry_msgs.msg.Pose()
      if self.gps is None:
        self.gps = rtabmap_ros.msg.GPS()
      if self.localTransform is None:
        self.localTransform = None
      if self.laserScanLocalTransform is None:
        self.laserScanLocalTransform = geometry_msgs.msg.Transform()
      if self.grid_view_point is None:
        self.grid_view_point = rtabmap_ros.msg.Point3f()
      if self.wordKpts is None:
        self.wordKpts = None
      if self.wordPts is None:
        self.wordPts = None
      if self.globalDescriptors is None:
        self.globalDescriptors = None
      if self.env_sensors is None:
        self.env_sensors = None
      end = 0
      _x = self
      start = end
      end += 20
      (_x.id, _x.mapId, _x.weight, _x.stamp,) = _get_struct_3id().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.label = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.label = str[start:end]
      _x = self
      start = end
      end += 160
      (_x.pose.position.x, _x.pose.position.y, _x.pose.position.z, _x.pose.orientation.x, _x.pose.orientation.y, _x.pose.orientation.z, _x.pose.orientation.w, _x.groundTruthPose.position.x, _x.groundTruthPose.position.y, _x.groundTruthPose.position.z, _x.groundTruthPose.orientation.x, _x.groundTruthPose.orientation.y, _x.groundTruthPose.orientation.z, _x.groundTruthPose.orientation.w, _x.gps.stamp, _x.gps.longitude, _x.gps.latitude, _x.gps.altitude, _x.gps.error, _x.gps.bearing,) = _get_struct_20d().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      self.image = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      self.depth = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sf'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.fx = numpy.frombuffer(str[start:end], dtype=numpy.float32, count=length)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sf'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.fy = numpy.frombuffer(str[start:end], dtype=numpy.float32, count=length)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sf'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.cx = numpy.frombuffer(str[start:end], dtype=numpy.float32, count=length)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sf'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.cy = numpy.frombuffer(str[start:end], dtype=numpy.float32, count=length)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sf'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.width = numpy.frombuffer(str[start:end], dtype=numpy.float32, count=length)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sf'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.height = numpy.frombuffer(str[start:end], dtype=numpy.float32, count=length)
      start = end
      end += 4
      (self.baseline,) = _get_struct_f().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.localTransform = []
      for i in range(0, length):
        val1 = geometry_msgs.msg.Transform()
        _v22 = val1.translation
        _x = _v22
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
        _v23 = val1.rotation
        _x = _v23
        start = end
        end += 32
        (_x.x, _x.y, _x.z, _x.w,) = _get_struct_4d().unpack(str[start:end])
        self.localTransform.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      self.laserScan = str[start:end]
      _x = self
      start = end
      end += 68
      (_x.laserScanMaxPts, _x.laserScanMaxRange, _x.laserScanFormat, _x.laserScanLocalTransform.translation.x, _x.laserScanLocalTransform.translation.y, _x.laserScanLocalTransform.translation.z, _x.laserScanLocalTransform.rotation.x, _x.laserScanLocalTransform.rotation.y, _x.laserScanLocalTransform.rotation.z, _x.laserScanLocalTransform.rotation.w,) = _get_struct_ifi7d().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      self.userData = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      self.grid_ground = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      self.grid_obstacles = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      self.grid_empty_cells = str[start:end]
      _x = self
      start = end
      end += 16
      (_x.grid_cell_size, _x.grid_view_point.x, _x.grid_view_point.y, _x.grid_view_point.z,) = _get_struct_4f().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%si'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.wordIds = numpy.frombuffer(str[start:end], dtype=numpy.int32, count=length)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.wordKpts = []
      for i in range(0, length):
        val1 = rtabmap_ros.msg.KeyPoint()
        _v24 = val1.pt
        _x = _v24
        start = end
        end += 8
        (_x.x, _x.y,) = _get_struct_2f().unpack(str[start:end])
        _x = val1
        start = end
        end += 20
        (_x.size, _x.angle, _x.response, _x.octave, _x.class_id,) = _get_struct_3f2i().unpack(str[start:end])
        self.wordKpts.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.wordPts = []
      for i in range(0, length):
        val1 = rtabmap_ros.msg.Point3f()
        _x = val1
        start = end
        end += 12
        (_x.x, _x.y, _x.z,) = _get_struct_3f().unpack(str[start:end])
        self.wordPts.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      self.wordDescriptors = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.globalDescriptors = []
      for i in range(0, length):
        val1 = rtabmap_ros.msg.GlobalDescriptor()
        _v25 = val1.header
        start = end
        end += 4
        (_v25.seq,) = _get_struct_I().unpack(str[start:end])
        _v26 = _v25.stamp
        _x = _v26
        start = end
        end += 8
        (_x.secs, _x.nsecs,) = _get_struct_2I().unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          _v25.frame_id = str[start:end].decode('utf-8', 'rosmsg')
        else:
          _v25.frame_id = str[start:end]
        start = end
        end += 4
        (val1.type,) = _get_struct_i().unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        val1.info = str[start:end]
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        val1.data = str[start:end]
        self.globalDescriptors.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.env_sensors = []
      for i in range(0, length):
        val1 = rtabmap_ros.msg.EnvSensor()
        _v27 = val1.header
        start = end
        end += 4
        (_v27.seq,) = _get_struct_I().unpack(str[start:end])
        _v28 = _v27.stamp
        _x = _v28
        start = end
        end += 8
        (_x.secs, _x.nsecs,) = _get_struct_2I().unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          _v27.frame_id = str[start:end].decode('utf-8', 'rosmsg')
        else:
          _v27.frame_id = str[start:end]
        _x = val1
        start = end
        end += 12
        (_x.type, _x.value,) = _get_struct_id().unpack(str[start:end])
        self.env_sensors.append(val1)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_20d = None
def _get_struct_20d():
    global _struct_20d
    if _struct_20d is None:
        _struct_20d = struct.Struct("<20d")
    return _struct_20d
_struct_2I = None
def _get_struct_2I():
    global _struct_2I
    if _struct_2I is None:
        _struct_2I = struct.Struct("<2I")
    return _struct_2I
_struct_2f = None
def _get_struct_2f():
    global _struct_2f
    if _struct_2f is None:
        _struct_2f = struct.Struct("<2f")
    return _struct_2f
_struct_3d = None
def _get_struct_3d():
    global _struct_3d
    if _struct_3d is None:
        _struct_3d = struct.Struct("<3d")
    return _struct_3d
_struct_3f = None
def _get_struct_3f():
    global _struct_3f
    if _struct_3f is None:
        _struct_3f = struct.Struct("<3f")
    return _struct_3f
_struct_3f2i = None
def _get_struct_3f2i():
    global _struct_3f2i
    if _struct_3f2i is None:
        _struct_3f2i = struct.Struct("<3f2i")
    return _struct_3f2i
_struct_3id = None
def _get_struct_3id():
    global _struct_3id
    if _struct_3id is None:
        _struct_3id = struct.Struct("<3id")
    return _struct_3id
_struct_4d = None
def _get_struct_4d():
    global _struct_4d
    if _struct_4d is None:
        _struct_4d = struct.Struct("<4d")
    return _struct_4d
_struct_4f = None
def _get_struct_4f():
    global _struct_4f
    if _struct_4f is None:
        _struct_4f = struct.Struct("<4f")
    return _struct_4f
_struct_f = None
def _get_struct_f():
    global _struct_f
    if _struct_f is None:
        _struct_f = struct.Struct("<f")
    return _struct_f
_struct_i = None
def _get_struct_i():
    global _struct_i
    if _struct_i is None:
        _struct_i = struct.Struct("<i")
    return _struct_i
_struct_id = None
def _get_struct_id():
    global _struct_id
    if _struct_id is None:
        _struct_id = struct.Struct("<id")
    return _struct_id
_struct_ifi7d = None
def _get_struct_ifi7d():
    global _struct_ifi7d
    if _struct_ifi7d is None:
        _struct_ifi7d = struct.Struct("<ifi7d")
    return _struct_ifi7d
