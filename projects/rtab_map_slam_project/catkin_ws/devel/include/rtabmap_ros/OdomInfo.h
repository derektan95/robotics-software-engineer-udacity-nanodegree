// Generated by gencpp from file rtabmap_ros/OdomInfo.msg
// DO NOT EDIT!


#ifndef RTABMAP_ROS_MESSAGE_ODOMINFO_H
#define RTABMAP_ROS_MESSAGE_ODOMINFO_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <std_msgs/Header.h>
#include <geometry_msgs/Transform.h>
#include <geometry_msgs/Transform.h>
#include <geometry_msgs/Transform.h>
#include <geometry_msgs/Transform.h>
#include <rtabmap_ros/KeyPoint.h>
#include <rtabmap_ros/Point3f.h>
#include <rtabmap_ros/Point2f.h>
#include <rtabmap_ros/Point2f.h>

namespace rtabmap_ros
{
template <class ContainerAllocator>
struct OdomInfo_
{
  typedef OdomInfo_<ContainerAllocator> Type;

  OdomInfo_()
    : header()
    , lost(false)
    , matches(0)
    , inliers(0)
    , icpInliersRatio(0.0)
    , icpRotation(0.0)
    , icpTranslation(0.0)
    , icpStructuralComplexity(0.0)
    , icpStructuralDistribution(0.0)
    , icpCorrespondences(0)
    , covariance()
    , features(0)
    , localMapSize(0)
    , localScanMapSize(0)
    , localKeyFrames(0)
    , localBundleOutliers(0)
    , localBundleConstraints(0)
    , localBundleTime(0.0)
    , keyFrameAdded(false)
    , timeEstimation(0.0)
    , timeParticleFiltering(0.0)
    , stamp(0.0)
    , interval(0.0)
    , distanceTravelled(0.0)
    , memoryUsage(0)
    , gravityRollError(0.0)
    , gravityPitchError(0.0)
    , transform()
    , transformFiltered()
    , transformGroundTruth()
    , guessVelocity()
    , type(0)
    , wordsKeys()
    , wordsValues()
    , wordMatches()
    , wordInliers()
    , localMapKeys()
    , localMapValues()
    , localScanMap()
    , refCorners()
    , newCorners()
    , cornerInliers()  {
      covariance.assign(0.0);
  }
  OdomInfo_(const ContainerAllocator& _alloc)
    : header(_alloc)
    , lost(false)
    , matches(0)
    , inliers(0)
    , icpInliersRatio(0.0)
    , icpRotation(0.0)
    , icpTranslation(0.0)
    , icpStructuralComplexity(0.0)
    , icpStructuralDistribution(0.0)
    , icpCorrespondences(0)
    , covariance()
    , features(0)
    , localMapSize(0)
    , localScanMapSize(0)
    , localKeyFrames(0)
    , localBundleOutliers(0)
    , localBundleConstraints(0)
    , localBundleTime(0.0)
    , keyFrameAdded(false)
    , timeEstimation(0.0)
    , timeParticleFiltering(0.0)
    , stamp(0.0)
    , interval(0.0)
    , distanceTravelled(0.0)
    , memoryUsage(0)
    , gravityRollError(0.0)
    , gravityPitchError(0.0)
    , transform(_alloc)
    , transformFiltered(_alloc)
    , transformGroundTruth(_alloc)
    , guessVelocity(_alloc)
    , type(0)
    , wordsKeys(_alloc)
    , wordsValues(_alloc)
    , wordMatches(_alloc)
    , wordInliers(_alloc)
    , localMapKeys(_alloc)
    , localMapValues(_alloc)
    , localScanMap(_alloc)
    , refCorners(_alloc)
    , newCorners(_alloc)
    , cornerInliers(_alloc)  {
  (void)_alloc;
      covariance.assign(0.0);
  }



   typedef  ::std_msgs::Header_<ContainerAllocator>  _header_type;
  _header_type header;

   typedef uint8_t _lost_type;
  _lost_type lost;

   typedef int32_t _matches_type;
  _matches_type matches;

   typedef int32_t _inliers_type;
  _inliers_type inliers;

   typedef float _icpInliersRatio_type;
  _icpInliersRatio_type icpInliersRatio;

   typedef float _icpRotation_type;
  _icpRotation_type icpRotation;

   typedef float _icpTranslation_type;
  _icpTranslation_type icpTranslation;

   typedef float _icpStructuralComplexity_type;
  _icpStructuralComplexity_type icpStructuralComplexity;

   typedef float _icpStructuralDistribution_type;
  _icpStructuralDistribution_type icpStructuralDistribution;

   typedef int32_t _icpCorrespondences_type;
  _icpCorrespondences_type icpCorrespondences;

   typedef boost::array<double, 36>  _covariance_type;
  _covariance_type covariance;

   typedef int32_t _features_type;
  _features_type features;

   typedef int32_t _localMapSize_type;
  _localMapSize_type localMapSize;

   typedef int32_t _localScanMapSize_type;
  _localScanMapSize_type localScanMapSize;

   typedef int32_t _localKeyFrames_type;
  _localKeyFrames_type localKeyFrames;

   typedef int32_t _localBundleOutliers_type;
  _localBundleOutliers_type localBundleOutliers;

   typedef int32_t _localBundleConstraints_type;
  _localBundleConstraints_type localBundleConstraints;

   typedef float _localBundleTime_type;
  _localBundleTime_type localBundleTime;

   typedef uint8_t _keyFrameAdded_type;
  _keyFrameAdded_type keyFrameAdded;

   typedef float _timeEstimation_type;
  _timeEstimation_type timeEstimation;

   typedef float _timeParticleFiltering_type;
  _timeParticleFiltering_type timeParticleFiltering;

   typedef float _stamp_type;
  _stamp_type stamp;

   typedef float _interval_type;
  _interval_type interval;

   typedef float _distanceTravelled_type;
  _distanceTravelled_type distanceTravelled;

   typedef int32_t _memoryUsage_type;
  _memoryUsage_type memoryUsage;

   typedef float _gravityRollError_type;
  _gravityRollError_type gravityRollError;

   typedef float _gravityPitchError_type;
  _gravityPitchError_type gravityPitchError;

   typedef  ::geometry_msgs::Transform_<ContainerAllocator>  _transform_type;
  _transform_type transform;

   typedef  ::geometry_msgs::Transform_<ContainerAllocator>  _transformFiltered_type;
  _transformFiltered_type transformFiltered;

   typedef  ::geometry_msgs::Transform_<ContainerAllocator>  _transformGroundTruth_type;
  _transformGroundTruth_type transformGroundTruth;

   typedef  ::geometry_msgs::Transform_<ContainerAllocator>  _guessVelocity_type;
  _guessVelocity_type guessVelocity;

   typedef int32_t _type_type;
  _type_type type;

   typedef std::vector<int32_t, typename ContainerAllocator::template rebind<int32_t>::other >  _wordsKeys_type;
  _wordsKeys_type wordsKeys;

   typedef std::vector< ::rtabmap_ros::KeyPoint_<ContainerAllocator> , typename ContainerAllocator::template rebind< ::rtabmap_ros::KeyPoint_<ContainerAllocator> >::other >  _wordsValues_type;
  _wordsValues_type wordsValues;

   typedef std::vector<int32_t, typename ContainerAllocator::template rebind<int32_t>::other >  _wordMatches_type;
  _wordMatches_type wordMatches;

   typedef std::vector<int32_t, typename ContainerAllocator::template rebind<int32_t>::other >  _wordInliers_type;
  _wordInliers_type wordInliers;

   typedef std::vector<int32_t, typename ContainerAllocator::template rebind<int32_t>::other >  _localMapKeys_type;
  _localMapKeys_type localMapKeys;

   typedef std::vector< ::rtabmap_ros::Point3f_<ContainerAllocator> , typename ContainerAllocator::template rebind< ::rtabmap_ros::Point3f_<ContainerAllocator> >::other >  _localMapValues_type;
  _localMapValues_type localMapValues;

   typedef std::vector<uint8_t, typename ContainerAllocator::template rebind<uint8_t>::other >  _localScanMap_type;
  _localScanMap_type localScanMap;

   typedef std::vector< ::rtabmap_ros::Point2f_<ContainerAllocator> , typename ContainerAllocator::template rebind< ::rtabmap_ros::Point2f_<ContainerAllocator> >::other >  _refCorners_type;
  _refCorners_type refCorners;

   typedef std::vector< ::rtabmap_ros::Point2f_<ContainerAllocator> , typename ContainerAllocator::template rebind< ::rtabmap_ros::Point2f_<ContainerAllocator> >::other >  _newCorners_type;
  _newCorners_type newCorners;

   typedef std::vector<int32_t, typename ContainerAllocator::template rebind<int32_t>::other >  _cornerInliers_type;
  _cornerInliers_type cornerInliers;





  typedef boost::shared_ptr< ::rtabmap_ros::OdomInfo_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::rtabmap_ros::OdomInfo_<ContainerAllocator> const> ConstPtr;

}; // struct OdomInfo_

typedef ::rtabmap_ros::OdomInfo_<std::allocator<void> > OdomInfo;

typedef boost::shared_ptr< ::rtabmap_ros::OdomInfo > OdomInfoPtr;
typedef boost::shared_ptr< ::rtabmap_ros::OdomInfo const> OdomInfoConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::rtabmap_ros::OdomInfo_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::rtabmap_ros::OdomInfo_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::rtabmap_ros::OdomInfo_<ContainerAllocator1> & lhs, const ::rtabmap_ros::OdomInfo_<ContainerAllocator2> & rhs)
{
  return lhs.header == rhs.header &&
    lhs.lost == rhs.lost &&
    lhs.matches == rhs.matches &&
    lhs.inliers == rhs.inliers &&
    lhs.icpInliersRatio == rhs.icpInliersRatio &&
    lhs.icpRotation == rhs.icpRotation &&
    lhs.icpTranslation == rhs.icpTranslation &&
    lhs.icpStructuralComplexity == rhs.icpStructuralComplexity &&
    lhs.icpStructuralDistribution == rhs.icpStructuralDistribution &&
    lhs.icpCorrespondences == rhs.icpCorrespondences &&
    lhs.covariance == rhs.covariance &&
    lhs.features == rhs.features &&
    lhs.localMapSize == rhs.localMapSize &&
    lhs.localScanMapSize == rhs.localScanMapSize &&
    lhs.localKeyFrames == rhs.localKeyFrames &&
    lhs.localBundleOutliers == rhs.localBundleOutliers &&
    lhs.localBundleConstraints == rhs.localBundleConstraints &&
    lhs.localBundleTime == rhs.localBundleTime &&
    lhs.keyFrameAdded == rhs.keyFrameAdded &&
    lhs.timeEstimation == rhs.timeEstimation &&
    lhs.timeParticleFiltering == rhs.timeParticleFiltering &&
    lhs.stamp == rhs.stamp &&
    lhs.interval == rhs.interval &&
    lhs.distanceTravelled == rhs.distanceTravelled &&
    lhs.memoryUsage == rhs.memoryUsage &&
    lhs.gravityRollError == rhs.gravityRollError &&
    lhs.gravityPitchError == rhs.gravityPitchError &&
    lhs.transform == rhs.transform &&
    lhs.transformFiltered == rhs.transformFiltered &&
    lhs.transformGroundTruth == rhs.transformGroundTruth &&
    lhs.guessVelocity == rhs.guessVelocity &&
    lhs.type == rhs.type &&
    lhs.wordsKeys == rhs.wordsKeys &&
    lhs.wordsValues == rhs.wordsValues &&
    lhs.wordMatches == rhs.wordMatches &&
    lhs.wordInliers == rhs.wordInliers &&
    lhs.localMapKeys == rhs.localMapKeys &&
    lhs.localMapValues == rhs.localMapValues &&
    lhs.localScanMap == rhs.localScanMap &&
    lhs.refCorners == rhs.refCorners &&
    lhs.newCorners == rhs.newCorners &&
    lhs.cornerInliers == rhs.cornerInliers;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::rtabmap_ros::OdomInfo_<ContainerAllocator1> & lhs, const ::rtabmap_ros::OdomInfo_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace rtabmap_ros

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::rtabmap_ros::OdomInfo_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::rtabmap_ros::OdomInfo_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::rtabmap_ros::OdomInfo_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::rtabmap_ros::OdomInfo_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::rtabmap_ros::OdomInfo_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::rtabmap_ros::OdomInfo_<ContainerAllocator> const>
  : TrueType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::rtabmap_ros::OdomInfo_<ContainerAllocator> >
{
  static const char* value()
  {
    return "66979b4899394b2f3358952241c550e5";
  }

  static const char* value(const ::rtabmap_ros::OdomInfo_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x66979b4899394b2fULL;
  static const uint64_t static_value2 = 0x3358952241c550e5ULL;
};

template<class ContainerAllocator>
struct DataType< ::rtabmap_ros::OdomInfo_<ContainerAllocator> >
{
  static const char* value()
  {
    return "rtabmap_ros/OdomInfo";
  }

  static const char* value(const ::rtabmap_ros::OdomInfo_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::rtabmap_ros::OdomInfo_<ContainerAllocator> >
{
  static const char* value()
  {
    return "\n"
"Header header\n"
"\n"
"bool lost\n"
"int32 matches\n"
"int32 inliers\n"
"float32 icpInliersRatio\n"
"float32 icpRotation\n"
"float32 icpTranslation\n"
"float32 icpStructuralComplexity\n"
"float32 icpStructuralDistribution\n"
"int32 icpCorrespondences\n"
"float64[36] covariance\n"
"int32 features\n"
"int32 localMapSize\n"
"int32 localScanMapSize\n"
"int32 localKeyFrames\n"
"int32 localBundleOutliers\n"
"int32 localBundleConstraints\n"
"float32 localBundleTime\n"
"bool keyFrameAdded\n"
"float32 timeEstimation\n"
"float32 timeParticleFiltering\n"
"float32 stamp\n"
"float32 interval\n"
"float32 distanceTravelled\n"
"int32 memoryUsage # MB\n"
"float32 gravityRollError\n"
"float32 gravityPitchError\n"
"\n"
"geometry_msgs/Transform transform\n"
"geometry_msgs/Transform transformFiltered\n"
"geometry_msgs/Transform transformGroundTruth\n"
"geometry_msgs/Transform guessVelocity\n"
"\n"
"# 0=F2M, 1=F2F\n"
"int32 type\n"
"\n"
"# F2M odometry\n"
"#   std::multimap<int, cv::KeyPoint> words;\n"
"#   std::vector<int> wordMatches;\n"
"#   std::vector<int> wordInliers;\n"
"int32[] wordsKeys\n"
"KeyPoint[] wordsValues\n"
"int32[] wordMatches\n"
"int32[] wordInliers\n"
"int32[] localMapKeys\n"
"Point3f[] localMapValues\n"
"\n"
"# compressed local scan map data\n"
"# use rtabmap::util3d::uncompressData() from \"rtabmap/core/util3d.h\"\n"
"uint8[] localScanMap\n"
"\n"
"# F2F odometry\n"
"#   std::vector<cv::Point2f> refCorners;\n"
"#   std::vector<cv::Point2f> newCorners;\n"
"#   std::vector<int> cornerInliers;\n"
"Point2f[] refCorners\n"
"Point2f[] newCorners\n"
"int32[] cornerInliers\n"
"\n"
"\n"
"================================================================================\n"
"MSG: std_msgs/Header\n"
"# Standard metadata for higher-level stamped data types.\n"
"# This is generally used to communicate timestamped data \n"
"# in a particular coordinate frame.\n"
"# \n"
"# sequence ID: consecutively increasing ID \n"
"uint32 seq\n"
"#Two-integer timestamp that is expressed as:\n"
"# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')\n"
"# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')\n"
"# time-handling sugar is provided by the client library\n"
"time stamp\n"
"#Frame this data is associated with\n"
"string frame_id\n"
"\n"
"================================================================================\n"
"MSG: geometry_msgs/Transform\n"
"# This represents the transform between two coordinate frames in free space.\n"
"\n"
"Vector3 translation\n"
"Quaternion rotation\n"
"\n"
"================================================================================\n"
"MSG: geometry_msgs/Vector3\n"
"# This represents a vector in free space. \n"
"# It is only meant to represent a direction. Therefore, it does not\n"
"# make sense to apply a translation to it (e.g., when applying a \n"
"# generic rigid transformation to a Vector3, tf2 will only apply the\n"
"# rotation). If you want your data to be translatable too, use the\n"
"# geometry_msgs/Point message instead.\n"
"\n"
"float64 x\n"
"float64 y\n"
"float64 z\n"
"================================================================================\n"
"MSG: geometry_msgs/Quaternion\n"
"# This represents an orientation in free space in quaternion form.\n"
"\n"
"float64 x\n"
"float64 y\n"
"float64 z\n"
"float64 w\n"
"\n"
"================================================================================\n"
"MSG: rtabmap_ros/KeyPoint\n"
"#class cv::KeyPoint\n"
"#{\n"
"#    Point2f pt;\n"
"#    float size;\n"
"#    float angle;\n"
"#    float response;\n"
"#    int octave;\n"
"#    int class_id;\n"
"#}\n"
"\n"
"Point2f pt\n"
"float32 size\n"
"float32 angle\n"
"float32 response\n"
"int32 octave\n"
"int32 class_id\n"
"================================================================================\n"
"MSG: rtabmap_ros/Point2f\n"
"#class cv::Point2f\n"
"#{\n"
"#    float x;\n"
"#    float y;\n"
"#}\n"
"\n"
"float32 x\n"
"float32 y\n"
"================================================================================\n"
"MSG: rtabmap_ros/Point3f\n"
"#class cv::Point3f\n"
"#{\n"
"#    float x;\n"
"#    float y;\n"
"#    float z;\n"
"#}\n"
"\n"
"float32 x\n"
"float32 y\n"
"float32 z\n"
;
  }

  static const char* value(const ::rtabmap_ros::OdomInfo_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::rtabmap_ros::OdomInfo_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.header);
      stream.next(m.lost);
      stream.next(m.matches);
      stream.next(m.inliers);
      stream.next(m.icpInliersRatio);
      stream.next(m.icpRotation);
      stream.next(m.icpTranslation);
      stream.next(m.icpStructuralComplexity);
      stream.next(m.icpStructuralDistribution);
      stream.next(m.icpCorrespondences);
      stream.next(m.covariance);
      stream.next(m.features);
      stream.next(m.localMapSize);
      stream.next(m.localScanMapSize);
      stream.next(m.localKeyFrames);
      stream.next(m.localBundleOutliers);
      stream.next(m.localBundleConstraints);
      stream.next(m.localBundleTime);
      stream.next(m.keyFrameAdded);
      stream.next(m.timeEstimation);
      stream.next(m.timeParticleFiltering);
      stream.next(m.stamp);
      stream.next(m.interval);
      stream.next(m.distanceTravelled);
      stream.next(m.memoryUsage);
      stream.next(m.gravityRollError);
      stream.next(m.gravityPitchError);
      stream.next(m.transform);
      stream.next(m.transformFiltered);
      stream.next(m.transformGroundTruth);
      stream.next(m.guessVelocity);
      stream.next(m.type);
      stream.next(m.wordsKeys);
      stream.next(m.wordsValues);
      stream.next(m.wordMatches);
      stream.next(m.wordInliers);
      stream.next(m.localMapKeys);
      stream.next(m.localMapValues);
      stream.next(m.localScanMap);
      stream.next(m.refCorners);
      stream.next(m.newCorners);
      stream.next(m.cornerInliers);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct OdomInfo_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::rtabmap_ros::OdomInfo_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::rtabmap_ros::OdomInfo_<ContainerAllocator>& v)
  {
    s << indent << "header: ";
    s << std::endl;
    Printer< ::std_msgs::Header_<ContainerAllocator> >::stream(s, indent + "  ", v.header);
    s << indent << "lost: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.lost);
    s << indent << "matches: ";
    Printer<int32_t>::stream(s, indent + "  ", v.matches);
    s << indent << "inliers: ";
    Printer<int32_t>::stream(s, indent + "  ", v.inliers);
    s << indent << "icpInliersRatio: ";
    Printer<float>::stream(s, indent + "  ", v.icpInliersRatio);
    s << indent << "icpRotation: ";
    Printer<float>::stream(s, indent + "  ", v.icpRotation);
    s << indent << "icpTranslation: ";
    Printer<float>::stream(s, indent + "  ", v.icpTranslation);
    s << indent << "icpStructuralComplexity: ";
    Printer<float>::stream(s, indent + "  ", v.icpStructuralComplexity);
    s << indent << "icpStructuralDistribution: ";
    Printer<float>::stream(s, indent + "  ", v.icpStructuralDistribution);
    s << indent << "icpCorrespondences: ";
    Printer<int32_t>::stream(s, indent + "  ", v.icpCorrespondences);
    s << indent << "covariance[]" << std::endl;
    for (size_t i = 0; i < v.covariance.size(); ++i)
    {
      s << indent << "  covariance[" << i << "]: ";
      Printer<double>::stream(s, indent + "  ", v.covariance[i]);
    }
    s << indent << "features: ";
    Printer<int32_t>::stream(s, indent + "  ", v.features);
    s << indent << "localMapSize: ";
    Printer<int32_t>::stream(s, indent + "  ", v.localMapSize);
    s << indent << "localScanMapSize: ";
    Printer<int32_t>::stream(s, indent + "  ", v.localScanMapSize);
    s << indent << "localKeyFrames: ";
    Printer<int32_t>::stream(s, indent + "  ", v.localKeyFrames);
    s << indent << "localBundleOutliers: ";
    Printer<int32_t>::stream(s, indent + "  ", v.localBundleOutliers);
    s << indent << "localBundleConstraints: ";
    Printer<int32_t>::stream(s, indent + "  ", v.localBundleConstraints);
    s << indent << "localBundleTime: ";
    Printer<float>::stream(s, indent + "  ", v.localBundleTime);
    s << indent << "keyFrameAdded: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.keyFrameAdded);
    s << indent << "timeEstimation: ";
    Printer<float>::stream(s, indent + "  ", v.timeEstimation);
    s << indent << "timeParticleFiltering: ";
    Printer<float>::stream(s, indent + "  ", v.timeParticleFiltering);
    s << indent << "stamp: ";
    Printer<float>::stream(s, indent + "  ", v.stamp);
    s << indent << "interval: ";
    Printer<float>::stream(s, indent + "  ", v.interval);
    s << indent << "distanceTravelled: ";
    Printer<float>::stream(s, indent + "  ", v.distanceTravelled);
    s << indent << "memoryUsage: ";
    Printer<int32_t>::stream(s, indent + "  ", v.memoryUsage);
    s << indent << "gravityRollError: ";
    Printer<float>::stream(s, indent + "  ", v.gravityRollError);
    s << indent << "gravityPitchError: ";
    Printer<float>::stream(s, indent + "  ", v.gravityPitchError);
    s << indent << "transform: ";
    s << std::endl;
    Printer< ::geometry_msgs::Transform_<ContainerAllocator> >::stream(s, indent + "  ", v.transform);
    s << indent << "transformFiltered: ";
    s << std::endl;
    Printer< ::geometry_msgs::Transform_<ContainerAllocator> >::stream(s, indent + "  ", v.transformFiltered);
    s << indent << "transformGroundTruth: ";
    s << std::endl;
    Printer< ::geometry_msgs::Transform_<ContainerAllocator> >::stream(s, indent + "  ", v.transformGroundTruth);
    s << indent << "guessVelocity: ";
    s << std::endl;
    Printer< ::geometry_msgs::Transform_<ContainerAllocator> >::stream(s, indent + "  ", v.guessVelocity);
    s << indent << "type: ";
    Printer<int32_t>::stream(s, indent + "  ", v.type);
    s << indent << "wordsKeys[]" << std::endl;
    for (size_t i = 0; i < v.wordsKeys.size(); ++i)
    {
      s << indent << "  wordsKeys[" << i << "]: ";
      Printer<int32_t>::stream(s, indent + "  ", v.wordsKeys[i]);
    }
    s << indent << "wordsValues[]" << std::endl;
    for (size_t i = 0; i < v.wordsValues.size(); ++i)
    {
      s << indent << "  wordsValues[" << i << "]: ";
      s << std::endl;
      s << indent;
      Printer< ::rtabmap_ros::KeyPoint_<ContainerAllocator> >::stream(s, indent + "    ", v.wordsValues[i]);
    }
    s << indent << "wordMatches[]" << std::endl;
    for (size_t i = 0; i < v.wordMatches.size(); ++i)
    {
      s << indent << "  wordMatches[" << i << "]: ";
      Printer<int32_t>::stream(s, indent + "  ", v.wordMatches[i]);
    }
    s << indent << "wordInliers[]" << std::endl;
    for (size_t i = 0; i < v.wordInliers.size(); ++i)
    {
      s << indent << "  wordInliers[" << i << "]: ";
      Printer<int32_t>::stream(s, indent + "  ", v.wordInliers[i]);
    }
    s << indent << "localMapKeys[]" << std::endl;
    for (size_t i = 0; i < v.localMapKeys.size(); ++i)
    {
      s << indent << "  localMapKeys[" << i << "]: ";
      Printer<int32_t>::stream(s, indent + "  ", v.localMapKeys[i]);
    }
    s << indent << "localMapValues[]" << std::endl;
    for (size_t i = 0; i < v.localMapValues.size(); ++i)
    {
      s << indent << "  localMapValues[" << i << "]: ";
      s << std::endl;
      s << indent;
      Printer< ::rtabmap_ros::Point3f_<ContainerAllocator> >::stream(s, indent + "    ", v.localMapValues[i]);
    }
    s << indent << "localScanMap[]" << std::endl;
    for (size_t i = 0; i < v.localScanMap.size(); ++i)
    {
      s << indent << "  localScanMap[" << i << "]: ";
      Printer<uint8_t>::stream(s, indent + "  ", v.localScanMap[i]);
    }
    s << indent << "refCorners[]" << std::endl;
    for (size_t i = 0; i < v.refCorners.size(); ++i)
    {
      s << indent << "  refCorners[" << i << "]: ";
      s << std::endl;
      s << indent;
      Printer< ::rtabmap_ros::Point2f_<ContainerAllocator> >::stream(s, indent + "    ", v.refCorners[i]);
    }
    s << indent << "newCorners[]" << std::endl;
    for (size_t i = 0; i < v.newCorners.size(); ++i)
    {
      s << indent << "  newCorners[" << i << "]: ";
      s << std::endl;
      s << indent;
      Printer< ::rtabmap_ros::Point2f_<ContainerAllocator> >::stream(s, indent + "    ", v.newCorners[i]);
    }
    s << indent << "cornerInliers[]" << std::endl;
    for (size_t i = 0; i < v.cornerInliers.size(); ++i)
    {
      s << indent << "  cornerInliers[" << i << "]: ";
      Printer<int32_t>::stream(s, indent + "  ", v.cornerInliers[i]);
    }
  }
};

} // namespace message_operations
} // namespace ros

#endif // RTABMAP_ROS_MESSAGE_ODOMINFO_H
