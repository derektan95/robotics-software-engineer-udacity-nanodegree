// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: collision_map_request.proto

#ifndef PROTOBUF_collision_5fmap_5frequest_2eproto__INCLUDED
#define PROTOBUF_collision_5fmap_5frequest_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3000000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3000000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
#include "vector2d.pb.h"
// @@protoc_insertion_point(includes)

namespace collision_map_creator_msgs {
namespace msgs {

// Internal implementation detail -- do not call these.
void protobuf_AddDesc_collision_5fmap_5frequest_2eproto();
void protobuf_AssignDesc_collision_5fmap_5frequest_2eproto();
void protobuf_ShutdownFile_collision_5fmap_5frequest_2eproto();

class CollisionMapRequest;

// ===================================================================

class CollisionMapRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:collision_map_creator_msgs.msgs.CollisionMapRequest) */ {
 public:
  CollisionMapRequest();
  virtual ~CollisionMapRequest();

  CollisionMapRequest(const CollisionMapRequest& from);

  inline CollisionMapRequest& operator=(const CollisionMapRequest& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CollisionMapRequest& default_instance();

  void Swap(CollisionMapRequest* other);

  // implements Message ----------------------------------------------

  inline CollisionMapRequest* New() const { return New(NULL); }

  CollisionMapRequest* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CollisionMapRequest& from);
  void MergeFrom(const CollisionMapRequest& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(CollisionMapRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required .gazebo.msgs.Vector2d upperLeft = 1;
  bool has_upperleft() const;
  void clear_upperleft();
  static const int kUpperLeftFieldNumber = 1;
  const ::gazebo::msgs::Vector2d& upperleft() const;
  ::gazebo::msgs::Vector2d* mutable_upperleft();
  ::gazebo::msgs::Vector2d* release_upperleft();
  void set_allocated_upperleft(::gazebo::msgs::Vector2d* upperleft);

  // required .gazebo.msgs.Vector2d upperRight = 2;
  bool has_upperright() const;
  void clear_upperright();
  static const int kUpperRightFieldNumber = 2;
  const ::gazebo::msgs::Vector2d& upperright() const;
  ::gazebo::msgs::Vector2d* mutable_upperright();
  ::gazebo::msgs::Vector2d* release_upperright();
  void set_allocated_upperright(::gazebo::msgs::Vector2d* upperright);

  // required .gazebo.msgs.Vector2d lowerRight = 3;
  bool has_lowerright() const;
  void clear_lowerright();
  static const int kLowerRightFieldNumber = 3;
  const ::gazebo::msgs::Vector2d& lowerright() const;
  ::gazebo::msgs::Vector2d* mutable_lowerright();
  ::gazebo::msgs::Vector2d* release_lowerright();
  void set_allocated_lowerright(::gazebo::msgs::Vector2d* lowerright);

  // required .gazebo.msgs.Vector2d lowerLeft = 4;
  bool has_lowerleft() const;
  void clear_lowerleft();
  static const int kLowerLeftFieldNumber = 4;
  const ::gazebo::msgs::Vector2d& lowerleft() const;
  ::gazebo::msgs::Vector2d* mutable_lowerleft();
  ::gazebo::msgs::Vector2d* release_lowerleft();
  void set_allocated_lowerleft(::gazebo::msgs::Vector2d* lowerleft);

  // required double height = 5;
  bool has_height() const;
  void clear_height();
  static const int kHeightFieldNumber = 5;
  double height() const;
  void set_height(double value);

  // required double resolution = 6;
  bool has_resolution() const;
  void clear_resolution();
  static const int kResolutionFieldNumber = 6;
  double resolution() const;
  void set_resolution(double value);

  // optional string filename = 7 [default = ""];
  bool has_filename() const;
  void clear_filename();
  static const int kFilenameFieldNumber = 7;
  const ::std::string& filename() const;
  void set_filename(const ::std::string& value);
  void set_filename(const char* value);
  void set_filename(const char* value, size_t size);
  ::std::string* mutable_filename();
  ::std::string* release_filename();
  void set_allocated_filename(::std::string* filename);

  // optional int32 threshold = 8 [default = 255];
  bool has_threshold() const;
  void clear_threshold();
  static const int kThresholdFieldNumber = 8;
  ::google::protobuf::int32 threshold() const;
  void set_threshold(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:collision_map_creator_msgs.msgs.CollisionMapRequest)
 private:
  inline void set_has_upperleft();
  inline void clear_has_upperleft();
  inline void set_has_upperright();
  inline void clear_has_upperright();
  inline void set_has_lowerright();
  inline void clear_has_lowerright();
  inline void set_has_lowerleft();
  inline void clear_has_lowerleft();
  inline void set_has_height();
  inline void clear_has_height();
  inline void set_has_resolution();
  inline void clear_has_resolution();
  inline void set_has_filename();
  inline void clear_has_filename();
  inline void set_has_threshold();
  inline void clear_has_threshold();

  // helper for ByteSize()
  int RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::gazebo::msgs::Vector2d* upperleft_;
  ::gazebo::msgs::Vector2d* upperright_;
  ::gazebo::msgs::Vector2d* lowerright_;
  ::gazebo::msgs::Vector2d* lowerleft_;
  double height_;
  double resolution_;
  ::google::protobuf::internal::ArenaStringPtr filename_;
  ::google::protobuf::int32 threshold_;
  friend void  protobuf_AddDesc_collision_5fmap_5frequest_2eproto();
  friend void protobuf_AssignDesc_collision_5fmap_5frequest_2eproto();
  friend void protobuf_ShutdownFile_collision_5fmap_5frequest_2eproto();

  void InitAsDefaultInstance();
  static CollisionMapRequest* default_instance_;
};
// ===================================================================


// ===================================================================

#if !PROTOBUF_INLINE_NOT_IN_HEADERS
// CollisionMapRequest

// required .gazebo.msgs.Vector2d upperLeft = 1;
inline bool CollisionMapRequest::has_upperleft() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CollisionMapRequest::set_has_upperleft() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CollisionMapRequest::clear_has_upperleft() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CollisionMapRequest::clear_upperleft() {
  if (upperleft_ != NULL) upperleft_->::gazebo::msgs::Vector2d::Clear();
  clear_has_upperleft();
}
inline const ::gazebo::msgs::Vector2d& CollisionMapRequest::upperleft() const {
  // @@protoc_insertion_point(field_get:collision_map_creator_msgs.msgs.CollisionMapRequest.upperLeft)
  return upperleft_ != NULL ? *upperleft_ : *default_instance_->upperleft_;
}
inline ::gazebo::msgs::Vector2d* CollisionMapRequest::mutable_upperleft() {
  set_has_upperleft();
  if (upperleft_ == NULL) {
    upperleft_ = new ::gazebo::msgs::Vector2d;
  }
  // @@protoc_insertion_point(field_mutable:collision_map_creator_msgs.msgs.CollisionMapRequest.upperLeft)
  return upperleft_;
}
inline ::gazebo::msgs::Vector2d* CollisionMapRequest::release_upperleft() {
  // @@protoc_insertion_point(field_release:collision_map_creator_msgs.msgs.CollisionMapRequest.upperLeft)
  clear_has_upperleft();
  ::gazebo::msgs::Vector2d* temp = upperleft_;
  upperleft_ = NULL;
  return temp;
}
inline void CollisionMapRequest::set_allocated_upperleft(::gazebo::msgs::Vector2d* upperleft) {
  delete upperleft_;
  upperleft_ = upperleft;
  if (upperleft) {
    set_has_upperleft();
  } else {
    clear_has_upperleft();
  }
  // @@protoc_insertion_point(field_set_allocated:collision_map_creator_msgs.msgs.CollisionMapRequest.upperLeft)
}

// required .gazebo.msgs.Vector2d upperRight = 2;
inline bool CollisionMapRequest::has_upperright() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CollisionMapRequest::set_has_upperright() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CollisionMapRequest::clear_has_upperright() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CollisionMapRequest::clear_upperright() {
  if (upperright_ != NULL) upperright_->::gazebo::msgs::Vector2d::Clear();
  clear_has_upperright();
}
inline const ::gazebo::msgs::Vector2d& CollisionMapRequest::upperright() const {
  // @@protoc_insertion_point(field_get:collision_map_creator_msgs.msgs.CollisionMapRequest.upperRight)
  return upperright_ != NULL ? *upperright_ : *default_instance_->upperright_;
}
inline ::gazebo::msgs::Vector2d* CollisionMapRequest::mutable_upperright() {
  set_has_upperright();
  if (upperright_ == NULL) {
    upperright_ = new ::gazebo::msgs::Vector2d;
  }
  // @@protoc_insertion_point(field_mutable:collision_map_creator_msgs.msgs.CollisionMapRequest.upperRight)
  return upperright_;
}
inline ::gazebo::msgs::Vector2d* CollisionMapRequest::release_upperright() {
  // @@protoc_insertion_point(field_release:collision_map_creator_msgs.msgs.CollisionMapRequest.upperRight)
  clear_has_upperright();
  ::gazebo::msgs::Vector2d* temp = upperright_;
  upperright_ = NULL;
  return temp;
}
inline void CollisionMapRequest::set_allocated_upperright(::gazebo::msgs::Vector2d* upperright) {
  delete upperright_;
  upperright_ = upperright;
  if (upperright) {
    set_has_upperright();
  } else {
    clear_has_upperright();
  }
  // @@protoc_insertion_point(field_set_allocated:collision_map_creator_msgs.msgs.CollisionMapRequest.upperRight)
}

// required .gazebo.msgs.Vector2d lowerRight = 3;
inline bool CollisionMapRequest::has_lowerright() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void CollisionMapRequest::set_has_lowerright() {
  _has_bits_[0] |= 0x00000004u;
}
inline void CollisionMapRequest::clear_has_lowerright() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void CollisionMapRequest::clear_lowerright() {
  if (lowerright_ != NULL) lowerright_->::gazebo::msgs::Vector2d::Clear();
  clear_has_lowerright();
}
inline const ::gazebo::msgs::Vector2d& CollisionMapRequest::lowerright() const {
  // @@protoc_insertion_point(field_get:collision_map_creator_msgs.msgs.CollisionMapRequest.lowerRight)
  return lowerright_ != NULL ? *lowerright_ : *default_instance_->lowerright_;
}
inline ::gazebo::msgs::Vector2d* CollisionMapRequest::mutable_lowerright() {
  set_has_lowerright();
  if (lowerright_ == NULL) {
    lowerright_ = new ::gazebo::msgs::Vector2d;
  }
  // @@protoc_insertion_point(field_mutable:collision_map_creator_msgs.msgs.CollisionMapRequest.lowerRight)
  return lowerright_;
}
inline ::gazebo::msgs::Vector2d* CollisionMapRequest::release_lowerright() {
  // @@protoc_insertion_point(field_release:collision_map_creator_msgs.msgs.CollisionMapRequest.lowerRight)
  clear_has_lowerright();
  ::gazebo::msgs::Vector2d* temp = lowerright_;
  lowerright_ = NULL;
  return temp;
}
inline void CollisionMapRequest::set_allocated_lowerright(::gazebo::msgs::Vector2d* lowerright) {
  delete lowerright_;
  lowerright_ = lowerright;
  if (lowerright) {
    set_has_lowerright();
  } else {
    clear_has_lowerright();
  }
  // @@protoc_insertion_point(field_set_allocated:collision_map_creator_msgs.msgs.CollisionMapRequest.lowerRight)
}

// required .gazebo.msgs.Vector2d lowerLeft = 4;
inline bool CollisionMapRequest::has_lowerleft() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void CollisionMapRequest::set_has_lowerleft() {
  _has_bits_[0] |= 0x00000008u;
}
inline void CollisionMapRequest::clear_has_lowerleft() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void CollisionMapRequest::clear_lowerleft() {
  if (lowerleft_ != NULL) lowerleft_->::gazebo::msgs::Vector2d::Clear();
  clear_has_lowerleft();
}
inline const ::gazebo::msgs::Vector2d& CollisionMapRequest::lowerleft() const {
  // @@protoc_insertion_point(field_get:collision_map_creator_msgs.msgs.CollisionMapRequest.lowerLeft)
  return lowerleft_ != NULL ? *lowerleft_ : *default_instance_->lowerleft_;
}
inline ::gazebo::msgs::Vector2d* CollisionMapRequest::mutable_lowerleft() {
  set_has_lowerleft();
  if (lowerleft_ == NULL) {
    lowerleft_ = new ::gazebo::msgs::Vector2d;
  }
  // @@protoc_insertion_point(field_mutable:collision_map_creator_msgs.msgs.CollisionMapRequest.lowerLeft)
  return lowerleft_;
}
inline ::gazebo::msgs::Vector2d* CollisionMapRequest::release_lowerleft() {
  // @@protoc_insertion_point(field_release:collision_map_creator_msgs.msgs.CollisionMapRequest.lowerLeft)
  clear_has_lowerleft();
  ::gazebo::msgs::Vector2d* temp = lowerleft_;
  lowerleft_ = NULL;
  return temp;
}
inline void CollisionMapRequest::set_allocated_lowerleft(::gazebo::msgs::Vector2d* lowerleft) {
  delete lowerleft_;
  lowerleft_ = lowerleft;
  if (lowerleft) {
    set_has_lowerleft();
  } else {
    clear_has_lowerleft();
  }
  // @@protoc_insertion_point(field_set_allocated:collision_map_creator_msgs.msgs.CollisionMapRequest.lowerLeft)
}

// required double height = 5;
inline bool CollisionMapRequest::has_height() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void CollisionMapRequest::set_has_height() {
  _has_bits_[0] |= 0x00000010u;
}
inline void CollisionMapRequest::clear_has_height() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void CollisionMapRequest::clear_height() {
  height_ = 0;
  clear_has_height();
}
inline double CollisionMapRequest::height() const {
  // @@protoc_insertion_point(field_get:collision_map_creator_msgs.msgs.CollisionMapRequest.height)
  return height_;
}
inline void CollisionMapRequest::set_height(double value) {
  set_has_height();
  height_ = value;
  // @@protoc_insertion_point(field_set:collision_map_creator_msgs.msgs.CollisionMapRequest.height)
}

// required double resolution = 6;
inline bool CollisionMapRequest::has_resolution() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void CollisionMapRequest::set_has_resolution() {
  _has_bits_[0] |= 0x00000020u;
}
inline void CollisionMapRequest::clear_has_resolution() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void CollisionMapRequest::clear_resolution() {
  resolution_ = 0;
  clear_has_resolution();
}
inline double CollisionMapRequest::resolution() const {
  // @@protoc_insertion_point(field_get:collision_map_creator_msgs.msgs.CollisionMapRequest.resolution)
  return resolution_;
}
inline void CollisionMapRequest::set_resolution(double value) {
  set_has_resolution();
  resolution_ = value;
  // @@protoc_insertion_point(field_set:collision_map_creator_msgs.msgs.CollisionMapRequest.resolution)
}

// optional string filename = 7 [default = ""];
inline bool CollisionMapRequest::has_filename() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void CollisionMapRequest::set_has_filename() {
  _has_bits_[0] |= 0x00000040u;
}
inline void CollisionMapRequest::clear_has_filename() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void CollisionMapRequest::clear_filename() {
  filename_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_filename();
}
inline const ::std::string& CollisionMapRequest::filename() const {
  // @@protoc_insertion_point(field_get:collision_map_creator_msgs.msgs.CollisionMapRequest.filename)
  return filename_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CollisionMapRequest::set_filename(const ::std::string& value) {
  set_has_filename();
  filename_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:collision_map_creator_msgs.msgs.CollisionMapRequest.filename)
}
inline void CollisionMapRequest::set_filename(const char* value) {
  set_has_filename();
  filename_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:collision_map_creator_msgs.msgs.CollisionMapRequest.filename)
}
inline void CollisionMapRequest::set_filename(const char* value, size_t size) {
  set_has_filename();
  filename_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:collision_map_creator_msgs.msgs.CollisionMapRequest.filename)
}
inline ::std::string* CollisionMapRequest::mutable_filename() {
  set_has_filename();
  // @@protoc_insertion_point(field_mutable:collision_map_creator_msgs.msgs.CollisionMapRequest.filename)
  return filename_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* CollisionMapRequest::release_filename() {
  // @@protoc_insertion_point(field_release:collision_map_creator_msgs.msgs.CollisionMapRequest.filename)
  clear_has_filename();
  return filename_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CollisionMapRequest::set_allocated_filename(::std::string* filename) {
  if (filename != NULL) {
    set_has_filename();
  } else {
    clear_has_filename();
  }
  filename_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), filename);
  // @@protoc_insertion_point(field_set_allocated:collision_map_creator_msgs.msgs.CollisionMapRequest.filename)
}

// optional int32 threshold = 8 [default = 255];
inline bool CollisionMapRequest::has_threshold() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void CollisionMapRequest::set_has_threshold() {
  _has_bits_[0] |= 0x00000080u;
}
inline void CollisionMapRequest::clear_has_threshold() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void CollisionMapRequest::clear_threshold() {
  threshold_ = 255;
  clear_has_threshold();
}
inline ::google::protobuf::int32 CollisionMapRequest::threshold() const {
  // @@protoc_insertion_point(field_get:collision_map_creator_msgs.msgs.CollisionMapRequest.threshold)
  return threshold_;
}
inline void CollisionMapRequest::set_threshold(::google::protobuf::int32 value) {
  set_has_threshold();
  threshold_ = value;
  // @@protoc_insertion_point(field_set:collision_map_creator_msgs.msgs.CollisionMapRequest.threshold)
}

#endif  // !PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace msgs
}  // namespace collision_map_creator_msgs

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_collision_5fmap_5frequest_2eproto__INCLUDED
